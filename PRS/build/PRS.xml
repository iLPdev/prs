<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE MudletPackage>
<MudletPackage version="1.001">
  <ScriptPackage>
    <ScriptGroup isActive="yes" isFolder="yes">
        
      <name>PRS</name>
      <script>-- Procedural Realms Script (PRS) for Mudlet
-- by Stack (https://ilpdev.com/prs) &amp; Dalem

local version = "1.7.1"

-- check if the generic_mapper package is installed and, if so, uninstall it
if table.contains(getPackages(), "generic_mapper") then
  uninstallPackage("generic_mapper")
end

registerAnonymousEventHandler("gmcp.Char.player", function()
    PRSstats.stats()
end, true)

-- set Discord button to PR invite
setDiscordGameUrl("https://discord.gg/rRFEjc6vV9", "Procedural Realms")

-- Discord Rich Text Integration
setDiscordApplicationID("947477099596378142")
setDiscordGame("Procedural Realms")
local currentarea = getRoomArea(getPlayerRoom())
local areaname = getAreaTableSwap()[currentarea]
setDiscordDetail(areaname)
setDiscordElapsedStartTime(os.time(os.date("*t")))</script>
        
      <packageName/>
      
      <eventHandlerList>
</eventHandlerList>
      <Script isActive="yes" isFolder="no">
          
        <name>PRS</name>
        <script>-- Procedural Realms Script (PRS) for Mudlet
-- by Stack (https://ilpdev.com/prs) &amp; Dalem

local version = "1.7.1"

-- check if the generic_mapper package is installed and, if so, uninstall it
if table.contains(getPackages(), "generic_mapper") then
  uninstallPackage("generic_mapper")
end

registerAnonymousEventHandler("gmcp.Char.player", function()
    PRSstats.stats()
end, true)

-- set Discord button to PR invite
setDiscordGameUrl("https://discord.gg/rRFEjc6vV9", "Procedural Realms")

-- Discord Rich Text Integration
setDiscordApplicationID("947477099596378142")
setDiscordGame("Procedural Realms")
local currentarea = getRoomArea(getPlayerRoom())
local areaname = getAreaTableSwap()[currentarea]
setDiscordDetail(areaname)
setDiscordElapsedStartTime(os.time(os.date("*t")))</script>
          
        <packageName/>
        
        <eventHandlerList>
</eventHandlerList>
        
      </Script>
      <Script isActive="yes" isFolder="no">
          
        <name>prs-chat</name>
        <script>-- Procedural Realms Script (PRS) Communications for Mudlet
-- by Stack (https://ilpdev.com/prs) &amp; Dalem
PRSchat = PRSchat or {}
PRSchat.triggers = PRSchat.triggers or {}

local EMCO = require("PRS.emco")
local rev = require("PRS.revisionator")

PRSchat.EMCO = EMCO:new({
    name = "PRSchatTabs",
    x = "0",
    y = "0",
    width = "100%",
    height = "100%",
    allTab = true,
    allTabName = "All",
    consoleContainerColor = "transparent",
    gap = 2,
    leftMargin = 10,
    topMargin = 10,
    rightMargin = 10,
    bottomMargin = 10,
    consoleColor = "#101014",
    consoles = {"Chat", "Newbie", "Trade", "Local", "Tell", "All"},
    mapTab = false,
    activeTabCSS = stylesheet,
    inactiveTabCSS = istylesheet,
    preserveBackground = false,
    timestamp = true,
    customTimestampColor = true,
    timestampFGColor = "dim_gray",
    timestampBGColor = "#101014"
}, tabwindow4)

GUI.tabwindow4:transferEMCO(PRSchat.EMCO)

local emcoRev = rev:new({
    name = "prsRevisionator"
})

emcoRev:addPatch(function()
    --- patch for v1.6.0
    PRSchat.EMCO.tabBold = true
    PRSchat.EMCO:setActiveTabFGColor("white")
    PRSchat.EMCO:setinactiveTabFGColor("gray")
    PRSchat.EMCO:enableTimeStamp()
    PRSchat.EMCO:enableCustomTimestampColor()
    PRSchat.EMCO:setTimestampFGColor("dim_gray")
    --- patch for 1.7.0
    PRSchat.EMCO.leftMargin = 10
    PRSchat.EMCO.topMargin = 10
    PRSchat.EMCO.rightMargin = 10
    PRSchat.EMCO.bottomMargin = 10
    PRSchat.EMCO:disableMapTab()
    PRSchat.EMCO:disablePreserveBackground()
    PRSchat.EMCO:setConsoleContainerColor("transparent")
    PRSchat.EMCO.setconsoleColor("#101014")
    PRSchat.EMCO:setTimestampBGColor("#101014")
end)

local function saver(eventName, packageName)
    if eventName == "sysExitEvent" or packageName == "PRS" then
        PRSchat.EMCO:save()
    end
end

local function loader(eventName, packageName)
    if eventName == "sysLoadEvent" or packageName == "PRS" then
        PRSchat.EMCO:load()
        -- new stuff below here
        local changed = emcoRev:migrate()
        if changed then -- save the emco changes back to its own save file
            PRSchat.EMCO:save()
        end
    end
end

PRSchat.EMCO:setCmdAction("Chat", function(str)
    send("chat " .. str)
end)
PRSchat.EMCO.mc["Chat"]:enableCommandLine()
PRSchat.EMCO:setCmdAction("Newbie", function(str)
    send("newbie " .. str)
end)
PRSchat.EMCO.mc["Newbie"]:enableCommandLine()
PRSchat.EMCO:setCmdAction("Trade", function(str)
    send("trade " .. str)
end)
PRSchat.EMCO.mc["Trade"]:enableCommandLine()
PRSchat.EMCO:setCmdAction("Local", function(str)
    send("say " .. str)
end)
PRSchat.EMCO.mc["Local"]:enableCommandLine()
local tell_rex = rex.new("^@(?&lt;to&gt;\\w+) (?&lt;msg&gt;.+)$")
PRSchat.EMCO:setCmdAction("Tell", function(str)
    local _, _, matches = tell_rex:tfind(str)
    if matches then
        send(f "tell {matches.to} {matches.msg}")
    else
        send("reply " .. str)
    end
end)
PRSchat.EMCO.mc["Tell"]:enableCommandLine()

registerNamedEventHandler("PRS", "load", "sysLoadEvent", loader)
registerNamedEventHandler("PRS", "install", "sysInstall", loader)
registerNamedEventHandler("PRS", "exit", "sysExitEvent", saver)
registerNamedEventHandler("PRS", "uninstall", "sysUninstall", saver)

function PRSchat.stop()
    for k, v in pairs(PRSchat.triggers) do
        killTrigger(v)
    end
    PRSchat.triggers = {}

    return true
end

function PRSchat.initialize()
    if not PRSchat.triggers.chat_trigger_id then
        PRSchat.triggers.chat_trigger_id = tempRegexTrigger("^&lt; Chat \\| (?&lt;sender&gt;.+) &gt; (?&lt;msg&gt;.+)$", function()
            local chat_lines = {}

            if not PRSchat.triggers.chat_line_id then
                PRSchat.triggers.chat_line_id = tempRegexTrigger(".*", function()
                    if isPrompt() then
                        local concat_lines = table.concat(chat_lines)
                        local result = concat_lines:sub(1, -2) .. "\n"

                        PRSchat.EMCO:decho("Chat", result:gsub(":0,0,0&gt;", ":16,16,20&gt;"), false)
                        killTrigger(PRSchat.triggers.chat_line_id)
                        PRSchat.triggers.chat_line_id = nil
                    else
                        table.insert(chat_lines, copy2decho() .. " ")
                    end
                end)
            end
        end)
    end

    if not PRSchat.triggers.newbie_trigger_id then
        PRSchat.triggers.newbie_trigger_id = tempRegexTrigger("^&lt; Newbie \\| (?&lt;sender&gt;.+) &gt; (?&lt;msg&gt;.+)$", function()
            local chat_lines = {}

            if not PRSchat.triggers.newbie_line_id then
                PRSchat.triggers.newbie_line_id = tempRegexTrigger(".*", function()
                    if isPrompt() then
                        local concat_lines = table.concat(chat_lines)
                        local result = concat_lines:sub(1, -2) .. "\n"

                        PRSchat.EMCO:decho("Newbie", result:gsub(":0,0,0&gt;", ":16,16,20&gt;"), false)
                        killTrigger(PRSchat.triggers.newbie_line_id)
                        PRSchat.triggers.newbie_line_id = nil
                    else
                        table.insert(chat_lines, copy2decho() .. " ")
                    end
                end)
            end
        end)
    end

    if not PRSchat.triggers.trade_trigger_id then
        PRSchat.triggers.trade_trigger_id = tempRegexTrigger("^&lt; Trade \\| (?&lt;sender&gt;.+) &gt; (?&lt;msg&gt;.+)$", function()
            local chat_lines = {}

            if not PRSchat.triggers.trade_line_id then
                PRSchat.triggers.trade_line_id = tempRegexTrigger(".*", function()
                    if isPrompt() then
                        local concat_lines = table.concat(chat_lines)
                        local result = concat_lines:sub(1, -2) .. "\n"

                        PRSchat.EMCO:decho("Trade", result:gsub(":0,0,0&gt;", ":16,16,20&gt;"), false)
                        killTrigger(PRSchat.triggers.trade_line_id)
                        PRSchat.triggers.trade_line_id = nil
                    else
                        table.insert(chat_lines, copy2decho() .. " ")
                    end
                end)
            end
        end)
    end

    if not PRSchat.triggers.local_trigger_id then
        PRSchat.triggers.local_trigger_id = tempRegexTrigger("^(?&lt;sender&gt;.+) say(?&lt;s&gt;s)?, '(?&lt;msg&gt;.+)$", function()
            local chat_lines = {}

            if not PRSchat.triggers.local_line_id then
                PRSchat.triggers.local_line_id = tempRegexTrigger(".+", function()
                    table.insert(chat_lines, copy2decho() .. " ")
                    if string.ends(line, "'") then
                        local concat_lines = table.concat(chat_lines)
                        local result = concat_lines:sub(1, -2) .. "\n"

                        PRSchat.EMCO:decho("Local", result:gsub(":0,0,0&gt;", ":16,16,20&gt;"), false)
                        killTrigger(PRSchat.triggers.local_line_id)
                        PRSchat.triggers.local_line_id = nil
                    end
                end)
            end
        end)
    end

    if not PRSchat.triggers.tell_trigger_id then
        PRSchat.triggers.tell_trigger_id = tempRegexTrigger("^(?&lt;from&gt;.+) tell(?&lt;s&gt;s)? (?&lt;to&gt;\\w+), '(?&lt;msg&gt;.+)$",
            function()
                local chat_lines = {}

                if not PRSchat.triggers.tell_line_id then
                    PRSchat.triggers.tell_line_id = tempRegexTrigger(".+", function()
                        table.insert(chat_lines, copy2decho() .. " ")
                        if string.ends(line, "'") then
                            local concat_lines = table.concat(chat_lines)
                            local result = concat_lines:sub(1, -2) .. "\n"

                            PRSchat.EMCO:decho("Tell", result:gsub(":0,0,0&gt;", ":16,16,20&gt;"), false)
                            killTrigger(PRSchat.triggers.tell_line_id)
                            PRSchat.triggers.tell_line_id = nil
                        end
                    end)
                end
            end)
    end
end
PRSchat.initialize()</script>
          
        <packageName/>
        
        <eventHandlerList>
</eventHandlerList>
        
      </Script>
      <Script isActive="yes" isFolder="no">
          
        <name>prs-core</name>
        <script>-- Procedural Realms Script (PRS) GMCP Events Core for Mudlet
-- by Dalem
-- https://ilpdev.com/prs
core = core or {}
core.events = core.events or {}

local function is_array(t)
    local i = 0
    for _ in pairs(t) do
        i = i + 1
        if t[i] == nil then
            return false
        end
    end
    return true
end

local function remove_key(table, key)
    local element = table[key]
    table[key] = nil
    return element
end

local function update_state_from_diff(old, diff, prefix)
    local events = {}
    for k in pairs(diff) do
        if type(diff[k]) == "table" and not is_array(diff[k]) then
            if next(diff[k]) == nil then
                old[k] = {}
            else
                old[k] = old[k] or {}

                update_state_from_diff(old[k], remove_key(diff, k), prefix .. "." .. k)
            end
        else
            old[k] = remove_key(diff, k)
        end
        table.insert(events, prefix .. "." .. k)
    end

    for _, ev in ipairs(events) do
        raiseEvent(ev)
    end
end

local function get_dropped_and_added_affects(old_affects, new_affects)
    local added_affects = {}
    local dropped_affects = {}

    if new_affects then
        table.sort(new_affects, function(left, right)
            return left.name &lt; right.name
        end)
    end
    if old_affects then
        table.sort(old_affects, function(left, right)
            return left.name &lt; right.name
        end)
    end

    local old_aff_idx = 1
    local new_aff_idx = 1
    local old_aff_n = table.getn(old_affects)
    local new_aff_n = table.getn(new_affects)
    while true do
        if new_aff_idx &gt; new_aff_n and old_aff_idx &gt; old_aff_n then
            break
        elseif old_aff_idx &gt; old_aff_n then
            table.insert(added_affects, 1, new_affects[new_aff_idx])
            new_aff_idx = new_aff_idx + 1
        elseif new_aff_idx &gt; new_aff_n then
            table.insert(dropped_affects, 1, old_affects[old_aff_idx])
            old_aff_idx = old_aff_idx + 1
        elseif old_affects[old_aff_idx].name == new_affects[new_aff_idx].name then
            old_aff_idx = old_aff_idx + 1
            new_aff_idx = new_aff_idx + 1
        elseif old_affects[old_aff_idx].name &gt; new_affects[new_aff_idx].name then
            table.insert(added_affects, 1, new_affects[new_aff_idx])
            new_aff_idx = new_aff_idx + 1
        elseif old_affects[old_aff_idx].name &lt; new_affects[new_aff_idx].name then
            table.insert(dropped_affects, 1, old_affects[old_aff_idx])
            old_aff_idx = old_aff_idx + 1
        end
    end

    return dropped_affects, added_affects
end

function core.on_gmcp_char(event, args)
    if not gmcp.Char.State then
        return
    end
    if not gmcp.Char.State.update then
        return
    end

    local diff_table = gmcp.Char.State.update

    local dropped = {}
    local added = {}
    if diff_table.affects then
        if not gmcp.Char.affects then
            gmcp.Char.affects = {}
        end
        dropped, added = get_dropped_and_added_affects(gmcp.Char.affects, diff_table.affects)
    end

    update_state_from_diff(gmcp.Char, diff_table, "gmcp.Char")

    if table.getn(dropped) &gt; 0 then
        for i, affect in ipairs(dropped) do
            raiseEvent("affectDropped", affect.name)
        end
    end
    if table.getn(added) &gt; 0 then
        for i, affect in ipairs(added) do
            raiseEvent("affectAdded", affect.name)
        end
    end
end

function core.on_gmcp_char_state(event, args)
    if not gmcp.Char.State then
        return
    end
    if not gmcp.Char.State.update then
        return
    end

    local diff_table = gmcp.Char.State.update

    local dropped = {}
    local added = {}
    if diff_table.affects then
        if not gmcp.Char.affects then
            gmcp.Char.affects = {}
        end
        dropped, added = get_dropped_and_added_affects(gmcp.Char.affects, diff_table.affects)
    end

    update_state_from_diff(gmcp.Char, diff_table, "gmcp.Char")

    if table.getn(dropped) &gt; 0 then
        for i, affect in ipairs(dropped) do
            raiseEvent("affectDropped", affect.name)
        end
    end
    if table.getn(added) &gt; 0 then
        for i, affect in ipairs(added) do
            raiseEvent("affectAdded", affect.name)
        end
    end
end

function core.initialize()
    for _, handlerID in pairs(core.events) do
        killAnonymousEventHandler(handlerID)
    end
    core.events.ongmcpchar = registerAnonymousEventHandler("gmcp.Char", "core.on_gmcp_char")
    core.events.ongmcpcharstate = registerAnonymousEventHandler("gmcp.Char.State", "core.on_gmcp_char_state")
end

function core.stop()
    for _, handlerID in pairs(core.events) do
        killAnonymousEventHandler(handlerID)
    end
end

core.initialize()
</script>
          
        <packageName/>
        
        <eventHandlerList>
</eventHandlerList>
        
      </Script>
      <Script isActive="yes" isFolder="no">
          
        <name>prs-gui</name>
        <script>-- Procedural Realms Script (PRS) Graphical User Interface (GUI) for Mudlet
-- by Stack (https://ilpdev.com/prs)
GUI = GUI or {}

-------[ Skin Mudlet Toolbar ]-----------------------------
setAppStyleSheet([[
QToolBar {
  background-color: rgb(24,24,28);
}

QToolBar QToolButton:!hover {
  color: white;
}
QToolBar QToolButton:hover {
  color: black;
}
]])

require "PRS.AdjustableTabWindow" -- PR-specific version of edru's code

-------[ Spawn the Adjustable Containers ]-----------------------------
GUI.top = Adjustable.Container:new({
    name = "top",
    y = "0%",
    height = "10%",
    adjLabelstyle = "border: 1px solid green;",
    defaultDir = string.format("%s/PRS/settings/", getMudletHomeDir())
})
GUI.bottom = Adjustable.Container:new({
    name = "bottom",
    height = "10%",
    y = "-10%",
    adjLabelstyle = "border: 1px solid green;",
    defaultDir = string.format("%s/PRS/settings/", getMudletHomeDir())
})
GUI.right_top = Adjustable.Container:new({
    name = "right_top",
    x = "-20%",
    y = "0%",
    height = "50%",
    width = "20%",
    adjLabelstyle = "border: 1px solid green;",
    defaultDir = string.format("%s/PRS/settings/", getMudletHomeDir())
})

GUI.right_bottom = Adjustable.Container:new({
    name = "right_bottom",
    x = "-20%",
    y = "50%",
    height = "50%",
    width = "20%",
    adjLabelstyle = "border: 1px solid green;",
    defaultDir = string.format("%s/PRS/settings/", getMudletHomeDir())
})

GUI.left_top = Adjustable.Container:new({
    name = "left_top",
    x = "0%",
    y = "0%",
    height = "50%",
    width = "20%",
    adjLabelstyle = "border: 1px solid green;",
    defaultDir = string.format("%s/PRS/settings/", getMudletHomeDir())
})

GUI.left_bottom = Adjustable.Container:new({
    name = "left_bottom",
    x = "0%",
    y = "50%",
    height = "50%",
    width = "20%",
    adjLabelstyle = "border: 1px solid green;",
    defaultDir = string.format("%s/PRS/settings/", getMudletHomeDir())
})

Adjustable.Container:doAll(function(self) -- add connect menu to all adjustable containers 
    self:addConnectMenu()
end)

-------[ Attach and Connect Borders of Adjustable Containers ]-----------------
GUI.top:attachToBorder("top")
GUI.bottom:attachToBorder("bottom")
GUI.left_top:attachToBorder("left")
GUI.left_bottom:attachToBorder("left")
GUI.right_top:attachToBorder("right")
GUI.right_bottom:attachToBorder("right")

GUI.top:connectToBorder("left")
GUI.top:connectToBorder("right")
GUI.bottom:connectToBorder("left")
GUI.bottom:connectToBorder("right")
GUI.left_top:connectToBorder("left")
GUI.left_bottom:connectToBorder("left")
GUI.right_top:connectToBorder("right")
GUI.right_bottom:connectToBorder("right")

GUI.top:changeMenuStyle("dark")
GUI.bottom:changeMenuStyle("dark")
GUI.right_top:changeMenuStyle("dark")
GUI.right_bottom:changeMenuStyle("dark")
GUI.left_top:changeMenuStyle("dark")
GUI.left_bottom:changeMenuStyle("dark")

-------[ Add TabWindows to Adjustable Containers ]-----------------------------
GUI.tabwindow1 = GUI.tabwindow1 or Adjustable.TabWindow:new({
    name = "tabwindow1",
    x = 0,
    y = 0,
    width = "100%",
    height = "100%",
    tabBarHeight = "10%",
    activeTabFGColor = "#DDDDDD",
    inactiveTabFGColor = "#555555",
    color1 = "rgb(24,24,28)",
    color2 = "rgb(16,16,20)",
    tabs = {"Vitals", "Stats"}
}, GUI.left_top)

GUI.tabwindow2 = GUI.tabwindow2 or Adjustable.TabWindow:new({
    name = "tabwindow2",
    x = 0,
    y = 0,
    width = "100%",
    height = "100%",
    tabBarHeight = "10%",
    activeTabFGColor = "#DDDDDD",
    inactiveTabFGColor = "#555555",
    color1 = "rgb(24,24,28)",
    color2 = "rgb(16,16,20)",
    tabs = {"Combat", "Quests"}
}, GUI.left_bottom)

GUI.tabwindow3 = GUI.tabwindow3 or Adjustable.TabWindow:new({
    name = "tabwindow3",
    x = 0,
    y = 0,
    width = "100%",
    height = "100%",
    tabBarHeight = "10%",
    activeTabFGColor = "#DDDDDD",
    inactiveTabFGColor = "#555555",
    color1 = "rgb(24,24,28)",
    color2 = "rgb(16,16,20)",
    tabs = {"Map"}
}, GUI.right_top)

GUI.tabwindow4 = GUI.tabwindow4 or Adjustable.TabWindow:new({
    name = "tabwindow4",
    x = 0,
    y = 0,
    width = "100%",
    height = "100%",
    tabBarHeight = "10%",
    activeTabFGColor = "#DDDDDD",
    inactiveTabFGColor = "#555555",
    color1 = "rgb(24,24,28)",
    color2 = "rgb(16,16,20)",
    tabs = {}
}, GUI.right_bottom)

-------[ Buttons ]-------------------------------------------------------------
GUI.buttons = Geyser.HBox:new({
    name = "buttons",
    height = "25",
    width = "98%"
}, GUI.top)

local button1 = Geyser.Label:new({
    name = "button1",
    message = [[&lt;center&gt;1&lt;/center&gt;]]
}, GUI.buttons)
button1:setClickCallback("slot1")
button1:setToolTip("[F1]", "10")
button1:setStyleSheet([[
    QLabel { 
    background-color: rgb(16,16,20);
    border: 1px solid black;
    border-radius: 3px;
    }
    QLabel::hover {
    background-color: rgb(24,24,28);
    border: 1px solid black;
    border-radius: 3px;
    } 
]])
function slot1()
    send("1")
end

local button2 = Geyser.Label:new({
    name = "button2",
    message = [[&lt;center&gt;2&lt;/center&gt;]]
}, GUI.buttons)
button2:setClickCallback("slot2")
button2:setToolTip("[F2]", "10")
button2:setStyleSheet([[
    QLabel { 
    background-color: rgb(16,16,20);
    border: 1px solid black;
    border-radius: 3px;
    }
    QLabel::hover {
    background-color: rgb(24,24,28);
    border: 1px solid black;
    border-radius: 3px;
    } 
]])
function slot2()
    send("2")
end

local button3 = Geyser.Label:new({
    name = "button3",
    message = [[&lt;center&gt;3&lt;/center&gt;]]
}, GUI.buttons)
button3:setClickCallback("slot3")
button3:setToolTip("[F3]", "10")
button3:setStyleSheet([[
    QLabel { 
    background-color: rgb(16,16,20);
    border: 1px solid black;
    border-radius: 3px;
    }
    QLabel::hover {
    background-color: rgb(24,24,28);
    border: 1px solid black;
    border-radius: 3px;
    } 
]])
function slot3()
    send("3")
end

local button4 = Geyser.Label:new({
    name = "button4",
    message = [[&lt;center&gt;4&lt;/center&gt;]]
}, GUI.buttons)
button4:setClickCallback("slot4")
button4:setToolTip("[F4]", "10")
button4:setStyleSheet([[
    QLabel { 
    background-color: rgb(16,16,20);
    border: 1px solid black;
    border-radius: 3px;
    }
    QLabel::hover {
    background-color: rgb(24,24,28);
    border: 1px solid black;
    border-radius: 3px;
    } 
]])
function slot4()
    send("4")
end

local button5 = Geyser.Label:new({
    name = "button5",
    message = [[&lt;center&gt;5&lt;/center&gt;]]
}, GUI.buttons)
button5:setClickCallback("slot5")
button5:setToolTip("[F5]", "10")
button5:setStyleSheet([[
    QLabel { 
    background-color: rgb(16,16,20);
    border: 1px solid black;
    border-radius: 3px;
    }
    QLabel::hover {
    background-color: rgb(24,24,28);
    border: 1px solid black;
    border-radius: 3px;
    } 
]])
function slot5()
    send("5")
end

local button6 = Geyser.Label:new({
    name = "button6",
    message = [[&lt;center&gt;6&lt;/center&gt;]]
}, GUI.buttons)
button6:setClickCallback("slot6")
button6:setToolTip("[F6]", "10")
button6:setStyleSheet([[
    QLabel { 
    background-color: rgb(16,16,20);
    border: 1px solid black;
    border-radius: 3px;
    }
    QLabel::hover {
    background-color: rgb(24,24,28);
    border: 1px solid black;
    border-radius: 3px;
    } 
]])
function slot6()
    send("6")
end

local button7 = Geyser.Label:new({
    name = "button7",
    message = [[&lt;center&gt;7&lt;/center&gt;]]
}, GUI.buttons)
button7:setClickCallback("slot7")
button7:setToolTip("[F7]", "10")
button7:setStyleSheet([[
    QLabel { 
    background-color: rgb(16,16,20);
    border: 1px solid black;
    border-radius: 3px;
    }
    QLabel::hover {
    background-color: rgb(24,24,28);
    border: 1px solid black;
    border-radius: 3px;
    } 
]])
function slot7()
    send("7")
end

local button8 = Geyser.Label:new({
    name = "button8",
    message = [[&lt;center&gt;8&lt;/center&gt;]]
}, GUI.buttons)
button8:setClickCallback("slot8")
button8:setToolTip("[F8]", "10")
button8:setStyleSheet([[
    QLabel { 
    background-color: rgb(16,16,20);
    border: 1px solid black;
    border-radius: 3px;
    }
    QLabel::hover {
    background-color: rgb(24,24,28);
    border: 1px solid black;
    border-radius: 3px;
    } 
]])
function slot8()
    send("8")
end

local button9 = Geyser.Label:new({
    name = "button9",
    message = [[&lt;center&gt;9&lt;/center&gt;]]
}, GUI.buttons)
button9:setClickCallback("slot9")
button9:setToolTip("[F9]", "10")
button9:setStyleSheet([[
    QLabel { 
    background-color: rgb(16,16,20);
    border: 1px solid black;
    border-radius: 3px;
    }
    QLabel::hover {
    background-color: rgb(24,24,28);
    border: 1px solid black;
    border-radius: 3px;
    } 
]])
function slot9()
    send("9")
end

local button10 = Geyser.Label:new({
    name = "button10",
    message = [[&lt;center&gt;0&lt;/center&gt;]]
}, GUI.buttons)
button10:setClickCallback("slot10")
button10:setToolTip("[F10]", "10")
button10:setStyleSheet([[
    QLabel { 
    background-color: rgb(16,16,20);
    border: 1px solid black;
    border-radius: 3px;
    }
    QLabel::hover {
    background-color: rgb(24,24,28);
    border: 1px solid black;
    border-radius: 3px;
    } 
]])
function slot10()
    send("0")
end

local button11 = Geyser.Label:new({
    name = "button11",
    message = [[&lt;center&gt;-&lt;/center&gt;]]
}, GUI.buttons)
button11:setClickCallback("slot11")
button11:setToolTip("[F11]", "10")
button11:setStyleSheet([[
    QLabel { 
    background-color: rgb(16,16,20);
    border: 1px solid black;
    border-radius: 3px;
    }
    QLabel::hover {
    background-color: rgb(24,24,28);
    border: 1px solid black;
    border-radius: 3px;
    } 
]])
function slot11()
    send("-")
end

local button12 = Geyser.Label:new({
    name = "button12",
    message = [[&lt;center&gt;=&lt;/center&gt;]]
}, GUI.buttons)
button12:setClickCallback("slot12")
button12:setToolTip("[F12]", "10")
button12:setStyleSheet([[
    QLabel { 
    background-color: rgb(16,16,20);
    border: 1px solid black;
    border-radius: 3px;
    }
    QLabel::hover {
    background-color: rgb(24,24,28);
    border: 1px solid black;
    border-radius: 3px;
    } 
]])
function slot12()
    send("=")
end

local button13 = Geyser.Label:new({
    name = "vote",
    message = [[&lt;center&gt;Vote!&lt;/center&gt;]]
}, GUI.buttons)
button13:setClickCallback("vote")
button13:setToolTip("Vote for PR daily!", "10")
button13:setStyleSheet([[
    QLabel { 
    background-color: rgb(16,16,20);
    border: 1px solid black;
    border-radius: 3px;
    }
    QLabel::hover {
    background-color: rgb(24,24,28);
    border: 1px solid black;
    border-radius: 3px;
    } 
]])
function vote()
    openUrl("https://www.mudverse.com/vote/531")
end

-------[ Spawn Mudlet Mapper ]---------------------------------
GUI.mapper = GUI.mapper or Geyser.Mapper:new({
    name = "mapper",
    x = 5,
    y = 5,
    width = "96%",
    height = "97%"
}, GUI.tabwindow3.Mapcenter)

-------[ Save/Load User Tab Prefs ]-----------------------------
GUI.tabwindow1:load(1, string.format("%s/PRS/settings/", getMudletHomeDir())) -- Load all tabs

function SaveTabsOnExit()
    GUI.tabwindow1:save(1, string.format("%s/PRS/settings/", getMudletHomeDir())) -- Save all tabs on exit
end
registerAnonymousEventHandler("sysExitEvent", SaveTabsOnExit)
</script>
          
        <packageName/>
        
        <eventHandlerList>
</eventHandlerList>
        
      </Script>
      <Script isActive="yes" isFolder="no">
          
        <name>prs-mapper</name>
        <script>-- Procedural Realms Script (PRS) for Mudlet
-- by Stack (https://ilpdev.com/prs) and Dalem based on generic GMCP mapping script 
-- by Blizzard (https://worldofpa.in) based upon an MSDP script from the Mudlet
-- forums in the generic mapper thread with pieces from Jor'Mox's generic mapper
-- script and the mmpkg mapper by breakone9r.
mudlet = mudlet or {};
mudlet.mapper_script = true

map = map or {}
map.room_info = map.room_info or {}
map.prev_info = map.prev_info or {}
map.aliases = map.aliases or {}
map.events = map.events or {}
map.configs = map.configs or {}
map.configs.speedwalk_delay = .2

local defaults = {
    -- using Geyser to handle the mapper in this, since this is a totally new script
    mapper = {
        x = 0,
        y = 0,
        width = "100%",
        height = "100%"
    }
}

local terrain_types = {
    -- used to make rooms of different terrain types have different colors
    -- add a new entry for each terrain type, and set the color with RGB values
    -- each id value must be unique, terrain types not listed here will use mapper default color
    -- not used if you define these in a map XML file
    ["Tall Grass"] = {
        id = 17,
        r = 0,
        g = 128,
        b = 0
    },
    ["Grass"] = {
        id = 18,
        r = 0,
        g = 255,
        b = 0
    },
    ["Shore"] = {
        id = 19,
        r = 128,
        g = 128,
        b = 0
    },
    ["Bridge"] = {
        id = 20,
        r = 255,
        g = 255,
        b = 255
    },
    ["Road"] = {
        id = 21,
        r = 0,
        g = 128,
        b = 128
    },
    ["Steppe"] = {
        id = 22,
        r = 255,
        g = 255,
        b = 0
    },
    ["Scrublands"] = {
        id = 23,
        r = 128,
        g = 128,
        b = 0
    },
    ["Wasteland"] = {
        id = 24,
        r = 128,
        g = 0,
        b = 0
    },
    ["Fence"] = {
        id = 25,
        r = 255,
        g = 255,
        b = 255
    },
    ["River"] = {
        id = 26,
        r = 0,
        g = 0,
        b = 255
    },
    ["Lake"] = {
        id = 27,
        r = 0,
        g = 0,
        b = 255
    },
    ["Fishing Pier"] = {
        id = 28,
        r = 0,
        g = 0,
        b = 255
    },
    ["Farmland"] = {
        id = 29,
        r = 255,
        g = 255,
        b = 0
    },
    ["Deep Water"] = {
        id = 30,
        r = 0,
        g = 0,
        b = 128
    },
    ["Gate"] = {
        id = 31,
        r = 255,
        g = 255,
        b = 0
    },
    ["Nexus"] = {
        id = 32,
        r = 128,
        g = 128,
        b = 128
    },
    ["Wall"] = {
        id = 33,
        r = 64,
        g = 64,
        b = 64
    },
    ["Armor Shop"] = {
        id = 34,
        r = 255,
        g = 255,
        b = 255
    },
    ["Alchemist"] = {
        id = 35,
        r = 255,
        g = 0,
        b = 255
    },
    ["Farming Store"] = {
        id = 36,
        r = 0,
        g = 128,
        b = 0
    },
    --  ["Farmland"] = {id = 37, r = 128, g = 128, b = 0}, -- duplicate key id reserved for later use
    ["Abandoned Mine"] = {
        id = 38,
        r = 255,
        g = 0,
        b = 0
    },
    ["Shrine"] = {
        id = 39,
        r = 255,
        g = 255,
        b = 255
    },
    ["Grocery Store"] = {
        id = 40,
        r = 128,
        g = 128,
        b = 0
    },
    ["Building"] = {
        id = 41,
        r = 255,
        g = 255,
        b = 0
    },
    ["Tool Shop"] = {
        id = 42,
        r = 128,
        g = 128,
        b = 0
    },
    ["Restaurant"] = {
        id = 43,
        r = 0,
        g = 255,
        b = 0
    },
    ["Clothing Shop"] = {
        id = 44,
        r = 0,
        g = 128,
        b = 128
    },
    ["Books Shop"] = {
        id = 45,
        r = 255,
        g = 255,
        b = 0
    },
    ["Book Shop"] = {
        id = 48,
        r = 255,
        g = 255,
        b = 0
    },
    ["Leatherworker's Shop"] = {
        id = 46,
        r = 0,
        g = 255,
        b = 255
    },
    ["Weapon Shop"] = {
        id = 47,
        r = 255,
        g = 0,
        b = 0
    },
    ["Altar"] = {
        id = 49,
        r = 255,
        g = 255,
        b = 255
    },
    ["Portal Shop"] = {
        id = 50,
        r = 128,
        g = 0,
        b = 128
    },
    ["Auction House"] = {
        id = 51,
        r = 128,
        g = 0,
        b = 0
    },
    ["Underworld Shop"] = {
        id = 52,
        r = 192,
        g = 192,
        b = 192
    },
    ["Hall of Scenarios"] = {
        id = 53,
        r = 255,
        g = 0,
        b = 0
    },
    ["Employment Office"] = {
        id = 54,
        r = 255,
        g = 255,
        b = 0
    },
    ["Hall of Lessons"] = {
        id = 55,
        r = 255,
        g = 0,
        b = 255
    },
    ["Bounty Board"] = {
        id = 56,
        r = 0,
        g = 255,
        b = 0
    },
    ["Vending Machine"] = {
        id = 57,
        r = 255,
        g = 0,
        b = 255
    },
    ["Tavern Stairs"] = {
        id = 58,
        r = 255,
        g = 255,
        b = 255
    },
    ["Great Plains Portal"] = {
        id = 59,
        r = 255,
        g = 0,
        b = 255
    },
    ["Hidden Grove Portal"] = {
        id = 60,
        r = 255,
        g = 0,
        b = 255
    },
    ["Endless Sands Portal"] = {
        id = 61,
        r = 255,
        g = 0,
        b = 255
    },
    ["Frozen Peaks Portal"] = {
        id = 62,
        r = 255,
        g = 0,
        b = 255
    },
    ["Dark Woods"] = {
        id = 63,
        r = 128,
        g = 128,
        b = 128
    },
    ["Thick Woods"] = {
        id = 64,
        r = 0,
        g = 128,
        b = 0
    },
    ["Obelisk"] = {
        id = 65,
        r = 128,
        g = 0,
        b = 128
    },
    ["Spider Cave"] = {
        id = 66,
        r = 0,
        g = 128,
        b = 0
    },
    ["Tempest Hideout"] = {
        id = 67,
        r = 128,
        g = 128,
        b = 128
    },
    ["Temple"] = {
        id = 68,
        r = 128,
        g = 128,
        b = 128
    },
    ["Sparse Woods"] = {
        id = 69,
        r = 0,
        g = 255,
        b = 0
    },
    ["Statue Shrine"] = {
        id = 70,
        r = 255,
        g = 255,
        b = 0
    },
    ["Desert"] = {
        id = 71,
        r = 255,
        g = 255,
        b = 0
    },
    ["Ravine"] = {
        id = 72,
        r = 128,
        g = 128,
        b = 128
    },
    ["Dunes"] = {
        id = 73,
        r = 255,
        g = 255,
        b = 0
    },
    ["Legion Fortress"] = {
        id = 74,
        r = 255,
        g = 0,
        b = 0
    },
    ["Plateau"] = {
        id = 75,
        r = 255,
        g = 0,
        b = 0
    },
    ["Canyon"] = {
        id = 76,
        r = 128,
        g = 0,
        b = 128
    },
    ["Oasis"] = {
        id = 77,
        r = 0,
        g = 155,
        b = 0
    },
    ["Summit"] = {
        id = 78,
        r = 255,
        g = 255,
        b = 255
    },
    --  ["Ravine"] = {id = 79, r = 128, g = 128, b = 128}, -- duplicate key id reserved for later use
    ["Mountains"] = {
        id = 80,
        r = 0,
        g = 255,
        b = 255
    },
    ["Foothills"] = {
        id = 81,
        r = 255,
        g = 255,
        b = 0
    },
    ["Valley"] = {
        id = 82,
        r = 0,
        g = 128,
        b = 0
    },
    ["Bait and Tackle"] = {
        id = 83,
        r = 255,
        g = 255,
        b = 255
    },
    ["Riscacles Settlement"] = {
        id = 84,
        r = 128,
        g = 0,
        b = 128
    },
    ["Temple Entrance"] = {
        id = 85,
        r = 128,
        g = 0,
        b = 128
    },
    ["Frozen River"] = {
        id = 86,
        r = 0,
        g = 255,
        b = 255
    },
    ["Clearing"] = {
        id = 87,
        r = 0,
        g = 128,
        b = 0
    },
    ["Frozen Peak"] = {
        id = 88,
        r = 0,
        g = 0,
        b = 255
    },
    ["Obsidian Floor"] = {
        id = 89,
        r = 192,
        g = 192,
        b = 192
    },
    ["Obelisk Exit"] = {
        id = 90,
        r = 128,
        g = 0,
        b = 128
    },
    ["Permafrost"] = {
        id = 91,
        r = 0,
        g = 255,
        b = 255
    },
    ["Gold Mine Tailings"] = {
        id = 92,
        r = 255,
        g = 255,
        b = 255
    },
    ["Witch Doctor"] = {
        id = 93,
        r = 255,
        g = 0,
        b = 255
    },
    ["Combat Book Shop"] = {
        id = 94,
        r = 255,
        g = 255,
        b = 0
    },
    ["Artisan Book Shop"] = {
        id = 95,
        r = 255,
        g = 255,
        b = 0
    },
    ["Crafting Book Shop"] = {
        id = 96,
        r = 255,
        g = 255,
        b = 0
    },
    ["Scroll Scribe"] = {
        id = 97,
        r = 255,
        g = 255,
        b = 0
    }
}

-- list of possible movement directions and appropriate coordinate changes
local move_vectors = {
    n = {0, 1, 0},
    s = {0, -1, 0},
    e = {1, 0, 0},
    w = {-1, 0, 0},
    nw = {-1, 1, 0},
    ne = {1, 1, 0},
    sw = {-1, -1, 0},
    se = {1, -1, 0},
    u = {0, 0, 1},
    d = {0, 0, -1}
}

local exitmap = {
    n = 'north',
    ne = 'northeast',
    nw = 'northwest',
    e = 'east',
    w = 'west',
    s = 'south',
    se = 'southeast',
    sw = 'southwest',
    u = 'up',
    d = 'down',
    ["in"] = 'in',
    out = 'out',
    l = 'look'
}

local stubmap = {
    north = 1,
    northeast = 2,
    northwest = 3,
    east = 4,
    west = 5,
    south = 6,
    southeast = 7,
    southwest = 8,
    up = 9,
    down = 10,
    ["in"] = 11,
    out = 12,
    northup = 13,
    southdown = 14,
    southup = 15,
    northdown = 16,
    eastup = 17,
    westdown = 18,
    westup = 19,
    eastdown = 20,
    [1] = "n",
    [2] = "ne",
    [3] = "nw",
    [4] = "e",
    [5] = "w",
    [6] = "s",
    [7] = "se",
    [8] = "sw",
    [9] = "u",
    [10] = "d",
    [11] = "in",
    [12] = "out",
    [13] = "northup",
    [14] = "southdown",
    [15] = "southup",
    [16] = "northdown",
    [17] = "eastup",
    [18] = "westdown",
    [19] = "westup",
    [20] = "eastdown"
}

local reverse_dir = {
    n = "s",
    e = "w",
    s = "n",
    w = "e",
    ne = "sw",
    nw = "se",
    se = "nw",
    sw = "ne",
    d = "u",
    u = "d"
}

local short = {}
for k, v in pairs(exitmap) do
    short[v] = k
end

local function get_room_id_by_coordinates(area_name, x, y, z)
    local result = getRoomIDbyHash(area_name .. ":" .. x .. "," .. y .. "," .. z)
    if result == -1 then
        return nil
    else
        return result
    end
end

local function make_room()
    local info = map.room_info
    local coords = {info.x, -info.y, 0}
    local room_id = createRoomID()
    if not addRoom(room_id) then
        echo("Error: call to addRoom failed.\n")
    end

    setRoomIDbyHash(room_id, info.area .. ":" .. coords[1] .. "," .. coords[2] .. "," .. coords[3])

    setRoomName(room_id, info.name)

    local areas = getAreaTable()

    local area_id
    if areas[info.area] == nil then
        local areaID, err = addAreaName(info.area)
        if areaID == nil or areaID &lt; 1 or err then
            echo("Error: new area name could not be added - error is: " .. err .. "\n")
            return
        else
            setGridMode(areaID, true)
            area_id = areaID
        end
    else
        area_id = areas[info.area]
    end

    if not area_id == getRoomArea(room_id) then
        echo("Error: room area was not set successfully.\n")
    end
    setRoomArea(room_id, area_id)
    setRoomCoordinates(room_id, coords[1], coords[2], coords[3])
    if terrain_types[info.terrain] then
        setRoomEnv(room_id, terrain_types[info.terrain].id)
    end

    for dir, _ in pairs(info.exits) do
        setExitStub(room_id, dir, true)

        local exit_coords_delta = move_vectors[dir]
        local exit_room_id = get_room_id_by_coordinates(info.area, coords[1] + exit_coords_delta[1],
            coords[2] + exit_coords_delta[2], coords[3] + exit_coords_delta[3])
        if exit_room_id ~= nill then
            connectExitStub(room_id, exit_room_id, dir)
        end
    end
end

local function shift_room(dir)
    local ID = get_room_id_by_coordinates(map.room_info.area, map.room_info.x, -map.room_info.y, 0)
    local x, y, z = getRoomCoordinates(ID)
    local x1, y1, z1 = table.unpack(move_vectors[dir])
    x = x + x1
    y = y + y1
    z = z + z1
    setRoomCoordinates(ID, x, y, z)
    updateMap()
end

local function handle_move()
    local info = map.room_info
    local room_id = get_room_id_by_coordinates(info.area, info.x, -info.y, 0)

    if not room_id then
        make_room()
    else
        local stubs = getExitStubs1(room_id)
        if stubs == nil then
            return
        end

        local areas = getAreaTable()
        local area_id = areas[info.area]
        if area_id == nil then
            echo("Error: found an existant room with an unmapped area id.\n")
            return
        end

        local coords = {info.x, -info.y, 0}

        for _, v in pairs(stubs) do
            local exit_coords_delta = move_vectors[stubmap[v]]
            local exit_room_id = get_room_id_by_coordinates(info.area, coords[1] + exit_coords_delta[1],
                coords[2] + exit_coords_delta[2], coords[3] + exit_coords_delta[3])
            if exit_room_id ~= nill then
                connectExitStub(room_id, exit_room_id, v)
            end
        end
    end
end

local function config()

    -- setting terrain colors
    for k, v in pairs(terrain_types) do
        setCustomEnvColor(v.id, v.r, v.g, v.b, 255)
    end
    -- making mapper window
    -- local info = defaults.mapper
    -- Geyser.Mapper:new({name = "myMap", x = info.x, y = info.y, width = info.width, height = info.height})
    -- clearing existing aliases if they exist
    for k, v in pairs(map.aliases) do
        killAlias(v)
    end
    map.aliases = {}
    -- making an alias to let the user shift a room around via command line
    table.insert(map.aliases, tempAlias([[^shift (\w+)$]], [[raiseEvent("shiftRoom",matches[2])]]))
    table.insert(map.aliases, tempAlias([[^make_room$]], [[make_room()]]))
end

local function check_doors(roomID, exits)
    -- looks to see if there are doors in designated directions
    -- used for room comparison, can also be used for pathing purposes
    if type(exits) == "string" then
        exits = {exits}
    end
    local statuses = {}
    local doors = getDoors(roomID)
    local dir
    for k, v in pairs(exits) do
        dir = short[k] or short[v]
        if table.contains({'u', 'd'}, dir) then
            dir = exitmap[dir]
        end
        if not doors[dir] or doors[dir] == 0 then
            return false
        else
            statuses[dir] = doors[dir]
        end
    end
    return statuses
end

local continue_walk, timerID
continue_walk = function(new_room)
    if not walking then
        return
    end
    -- calculate wait time until next command, with randomness
    local wait = map.configs.speedwalk_delay or 0
    if wait &gt; 0 and map.configs.speedwalk_random then
        wait = wait * (1 + math.random(0, 100) / 100)
    end
    -- if no wait after new room, move immediately
    if new_room and map.configs.speedwalk_wait and wait == 0 then
        new_room = false
    end
    -- send command if we don't need to wait
    if not new_room then
        send(table.remove(map.walkDirs, 1))
        -- check to see if we are done
        if #map.walkDirs == 0 then
            walking = false
        end
    end
    -- make tempTimer to send next command if necessary
    if walking and (not map.configs.speedwalk_wait or (map.configs.speedwalk_wait and wait &gt; 0)) then
        if timerID then
            killTimer(timerID)
        end
        timerID = tempTimer(wait, function()
            continue_walk()
        end)
    end
end

function map.speedwalk(roomID, walkPath, walkDirs)
    roomID = roomID or speedWalkPath[#speedWalkPath]
    local areas = getAreaTable()
    local area_id = areas[gmcp.Char.room.area]
    if area_id == nil then
        echo("Error: could not identify the current area.\n")
        return
    end
    local current_room_id = get_room_id_by_coordinates(gmcp.Char.room.area, gmcp.Char.room.x, -gmcp.Char.room.y, 0)
    if current_room_id == nil then
        echo("Error: could not find the current room in the map.\n")
        return
    end

    getPath(current_room_id, roomID)
    walkPath = speedWalkPath
    walkDirs = speedWalkDir
    if #speedWalkPath == 0 then
        echo("No path to chosen room found.", false, true)
        return
    end
    table.insert(walkPath, 1, current_room_id)
    -- go through dirs to find doors that need opened, etc
    -- add in necessary extra commands to walkDirs table
    local k = 1
    repeat
        local id, dir = walkPath[k], walkDirs[k]
        if exitmap[dir] or short[dir] then
            local door = check_doors(id, exitmap[dir] or dir)
            local status = door and door[dir]
            if status and status &gt; 1 then
                -- if locked, unlock door
                if status == 3 then
                    table.insert(walkPath, k, id)
                    table.insert(walkDirs, k, "unlock " .. (exitmap[dir] or dir))
                    k = k + 1
                end
                -- if closed, open door
                table.insert(walkPath, k, id)
                table.insert(walkDirs, k, "open " .. (exitmap[dir] or dir))
                k = k + 1
            end
        end
        k = k + 1
    until k &gt; #walkDirs
    if map.configs.use_translation then
        for k, v in ipairs(walkDirs) do
            walkDirs[k] = map.configs.lang_dirs[v] or v
        end
    end
    -- perform walk
    walking = true
    if map.configs.speedwalk_wait or map.configs.speedwalk_delay &gt; 0 then
        map.walkDirs = walkDirs
        continue_walk()
    else
        for _, dir in ipairs(walkDirs) do
            send(dir)
        end
        walking = false
    end
end

function doSpeedWalk()
    if #speedWalkPath ~= 0 then
        map.speedwalk(nil, speedWalkPath, speedWalkDir)
    else
        echo("No path to chosen room found.", false, true)
    end
end

function map.eventHandler(event, ...)
    if event == "gmcp.room.info" then
        if gmcp.room.info.zone == "Battlefield" then
            return
        end
        map.prev_info = map.room_info
        map.room_info = {
            vnum = gmcp.room.info.num,
            area = gmcp.room.info.zone,
            x = tonumber(gmcp.room.info.x),
            y = tonumber(gmcp.room.info.y),
            name = gmcp.room.info.name,
            terrain = gmcp.room.info.terrain,
            exits = table.deepcopy(gmcp.room.info.exits)
        }
        for k, v in pairs(map.room_info.exits) do
            map.room_info.exits[k] = tonumber(v)
        end
        if map.prev_info.area and (map.prev_info.area ~= map.room_info.area) then
            if gmcp.room.info.instanced then
                deleteArea(gmcp.room.info.zone)
            end
        end
        handle_move()
    elseif event == "shiftRoom" then
        local dir = exitmap[arg[1]] or arg[1]
        if not table.contains(exits, dir) then
            echo("Error: Invalid direction '" .. dir .. "'.")
        else
            shift_room(dir)
        end
    elseif event == "sysConnectionEvent" then
        config()
    end
end

if map.events.room_info_id then
    killAnonymousEventHandler(map.events.room_info_id)
end -- clean up any already registered handlers for this function
map.events.room_info_id = registerAnonymousEventHandler("gmcp.room.info", "map.eventHandler")
if map.events.shift_room_id then
    killAnonymousEventHandler(map.events.shift_room_id)
end -- clean up any already registered handlers for this function
map.events.shift_room_id = registerAnonymousEventHandler("shiftRoom", "map.eventHandler")
if map.events.connect_id then
    killAnonymousEventHandler(map.events.connect_id)
end -- clean up any already registered handlers for this function
map.events.connect_id = registerAnonymousEventHandler("sysConnectionEvent", "map.eventHandler")
if map.events.centering_id then
    killAnonymousEventHandler(map.events.centering_id)
end -- clean up any already registered handlers for this function
map.events.centering_id = registerAnonymousEventHandler("gmcp.Char.room", function(event, args)

    if gmcp.Char.room.area == "Battlefield" then
        return
    end

    local room_id = get_room_id_by_coordinates(gmcp.Char.room.area, gmcp.Char.room.x, -gmcp.Char.room.y, 0)
    if room_id ~= nil then
        centerview(room_id)
    end
end)
</script>
          
        <packageName/>
        
        <eventHandlerList>
</eventHandlerList>
        
      </Script>
      <Script isActive="yes" isFolder="no">
          
        <name>prs-quests</name>
        <script>local colorTable = {
  ['{{r'] = '&lt;ansi_red&gt;',
  ['{{R'] = '&lt;ansi_light_red&gt;',
  ['{{g'] = '&lt;ansi_green&gt;',
  ['{{G'] = '&lt;ansi_light_green&gt;',
  ['{{y'] = '&lt;ansi_yellow&gt;',
  ['{{Y'] = '&lt;ansi_light_yellow&gt;',
  ['{{b'] = '&lt;ansi_blue&gt;',
  ['{{B'] = '&lt;ansi_light_blue&gt;',
  ['{{m'] = '&lt;ansi_magenta&gt;',
  ['{{M'] = '&lt;ansi_light_magenta&gt;',
  ['{{c'] = '&lt;ansi_cyan&gt;',
  ['{{C'] = '&lt;ansi_light_cyan&gt;',
  ['{{w'] = '&lt;ansi_white&gt;',
  ['{{W'] = '&lt;ansi_light_white&gt;',
  ['{{K'] = '&lt;ansi_light_black&gt;',
}

questContainerTable = questContainerTable or {}

function clearContainers()
  questContainerTable = {}
end

local QUEST_LABEL_HEIGHT = 100
local QUEST_GAP = 0 

function getCechoColor(string)
  local formatted = string
  for placeholder, colorCode in pairs(colorTable) do
    formatted = formatted:gsub(placeholder, colorCode)
  end
  return formatted
end

function displayAllQuests()
  for i, quest in ipairs(gmcp.Char.quests) do
    displayQuest(i)
  end
  
  for n=#gmcp.Char.quests+1, #questContainerTable, 1 do
    echo("Hiding entry: " .. n)
    questContainerTable[n]:hide()
    questBox:remove(questContainerTable[n])
  end
end

scrollContainer = scrollContainer or Geyser.Container:new({
  name = "questScrollContainer",
  width = "90%",
  height = "90%"
}, GUI.tabwindow2.Questscenter)

questBox = questBox or Geyser.ScrollBox:new({
    name = "questScrollBox",
    height = "100%",
    width = "100%"
}, scrollContainer)

function displayQuest(questNum)
  local quest = gmcp.Char.quests[questNum]
  
  if questContainerTable[questNum] == nil then
    createNewQuestLabel(questNum)
  end
  
  questContainerTable[questNum]:show()
  questBox:add(questContainerTable[questNum])
  
  -- if questContainerTable[questNum].progressBox == nil then
    -- addGaugeToQuestLabel(questNum)
  -- end
  
  if quest.amount &gt; 0 then
    addGaugeToQuestLabel(questNum)
    questContainerTable[questNum].progressBox:show()
    echo("Showing progress box\n")
  else
    questContainerTable[questNum].progressBox:hide()
  end
    
  questContainerTable[questNum]:cecho(getQuestString(quest))
  
end  

function createNewQuestLabel(questNum)
  echo("inserting into table\n")
  table.insert(questContainerTable, Geyser.Label:new({
      name = "questName" .. questNum,
      x = 0,
      y = (QUEST_LABEL_HEIGHT + QUEST_GAP) * (questNum - 1),
      height = QUEST_LABEL_HEIGHT,
      width = "93%"
  }, questBox))
  questContainerTable[questNum]:setFontSize(14)
  questContainerTable[questNum]:setStyleSheet([[
    border-width: 1px;
    border-color: black;
    border-style: solid;
    border-right: none;
    border-left: none;
    background-color: #222;
    padding: 10px;
  ]])
  
  addGaugeToQuestLabel(questNum)
end

function addGaugeToQuestLabel(questNum)
  local quest = gmcp.Char.quests[questNum]

  -- box that holds the gauge and the label
  questContainerTable[questNum].progressBox = questContainerTable[questNum].progressBox or Geyser.HBox:new({
    name = "questProgressBox" .. questNum,
    x = 12,
    y = "65%",
    height = 15,
    width = "95%"
  }, questContainerTable[questNum])
  
  questContainerTable[questNum].progressBar = questContainerTable[questNum].progressBar or Geyser.Gauge:new({
      name = "questProgress" .. questNum,
      h_stretch_factor = 3.0
  }, questContainerTable[questNum].progressBox)
  -- -- 
  local c = quest.progress
  local m = quest.amount
  
  if (m ~= 0) then
    -- if not dividing by 0 then set the value
    questContainerTable[questNum].progressBar:setValue(c, m)
  end
  
  -- set styling
  local progressColor = "#70c0e8"
  if c == m then
    progressColor = "#63e2b7"
  end
  questContainerTable[questNum].progressBar.front:setStyleSheet(string.format([[
    background-color: %s;
    border-top: 1px black solid;
    border-left: 1px black solid;
    border-bottom: 1px black solid;
    border-radius: 7;
    margin-right: 5px;
    padding: 3px;
  ]], progressColor))
  questContainerTable[questNum].progressBar.back:setStyleSheet([[
    background-color: #444;
    border-width: 0px;
    border-color: black;
    border-style: solid;
    border-radius: 7;
    margin-right: 5px;
    padding: 3px;
  ]])
  
  -- create transparent label next to gauge
  questContainerTable[questNum].progressLabel = questContainerTable[questNum].progressLabel or Geyser.Label:new({
    name = "progressLabel" .. questNum,
    h_stretch_factor = 1.0
  }, questContainerTable[questNum].progressBox)
  questContainerTable[questNum].progressLabel:echo(c .. " / " .. m)
  questContainerTable[questNum].progressLabel:setStyleSheet([[
    background-color: rgba(0,0,0,0%);
  ]])
end

function getQuestString(quest)
  local questString = "&lt;ansi_light_white&gt;L" .. quest.level .. " " .. getCechoColor(quest.name) 
    .. "&lt;br&gt; Given by: &lt;ansi_light_yellow&gt;" .. quest.giver.name .. "&lt;ansi_white&gt;&lt;br&gt;"
  
  if (quest.location ~= nil) then
    questString = questString .. "&lt;ansi_light_white&gt;" .. quest.location.name .. "&lt;ansi_white&gt; at &lt;ansi_light_magenta&gt;" .. quest.location.coords.x .. "&lt;ansi_white&gt;, &lt;ansi_light_magenta&gt;" .. quest.location.coords.y .. "&lt;ansi_white&gt;"
  end
  
  return questString
end

function questEventHandler()
  questBox = questBox or Geyser.ScrollBox:new({
      name = "questScrollBox",
      height = "100%",
      width = "100%"
  }, scrollContainer)
  displayAllQuests()
end
 
if questEventHandlerId then
    killAnonymousEventHandler(questEventHandlerId)
end -- clean up any already registered handlers for this function
questEventHandlerId = registerAnonymousEventHandler("gmcp.Char.quests", questEventHandler)
</script>
          
        <packageName/>
        
        <eventHandlerList>
</eventHandlerList>
        
      </Script>
      <Script isActive="yes" isFolder="no">
          
        <name>prs-stats</name>
        <script>-- Procedural Realms Script (PRS) Stats Gauges for Mudlet
-- by Stack (https://ilpdev.com/prs) &amp; Dalem
PRSstats = PRSstats or {}
PRSstats.events = PRSstats.events or {}

local SUG = require("PRS.sug")

local function vitalsHeader()
    local header = Geyser.HBox:new({
        name = "header",
        height = 25,
        width = "93%"
    }, GUI.tabwindow1.Vitalscenter)
    local name = Geyser.Label:new({
        name = "name"
    }, header)
    name:setFontSize(12)
    name:setColor(0, 0, 0, 0)
    name:echo(gmcp.Char.player.name, "#f9f1a5", "l")
    local class = Geyser.Label:new({
        name = "class"
    }, header)
    class:setFontSize(12)
    class:setColor(0, 0, 0, 0)
    class:echo(gmcp.Char.player.class, "#b4009e", "c")
    if PRSstats.events.classChange_id then
        killAnonymousEventHandler(PRSstats.events.classChange_id)
    end
    PRSstats.events.classChange_id = registerAnonymousEventHandler("gmcp.Char.player.class", function()
        if gmcp.Char.player.class then
            class:echo(gmcp.Char.player.class, "#b4009e", "c")
        end
    end)
    local level = Geyser.Label:new({
        name = "level"
    }, header)
    level:setFontSize(12)
    level:setColor(0, 0, 0, 0)
    level:echo("Level " .. gmcp.Char.player.level, "#ababab", "r")
    if PRSstats.events.levelChange_id then
        killAnonymousEventHandler(PRSstats.events.levelChange_id)
    end
    PRSstats.events.levelChange_id = registerAnonymousEventHandler("gmcp.Char.player.level", function()
        if gmcp.Char.player.level then
            level:echo("Level " .. gmcp.Char.player.level, "#ababab", "r")
        end
    end)
end

local function statsTab()
    local statsVBox = Geyser.VBox:new({
        name = "statsVBox",
        height = "95%",
        width = "93%"
    }, GUI.tabwindow1.Statscenter)
    local abilitiesTitle = Geyser.Label:new({
        name = "abilitiesTitle",
        height = 30
    }, statsVBox)
    abilitiesTitle:setColor(0, 0, 0, 0)
    abilitiesTitle:setFontSize(12)
    abilitiesTitle:echo("Abilities", "#f2f2f2", "c")
        -- Strength
        local strengthHBox = Geyser.HBox:new({
            name = "strengthHBox",
            width = "93%"
        }, statsVBox)
        local strengthTitle = Geyser.Label:new({
            name = "strengthTitle"
        }, strengthHBox)
        strengthTitle:setColor(0, 0, 0, 0)
        strengthTitle:setFontSize(9)
        strengthTitle:echo("Strength:", "#aaaaaa", "r")
        local strength = Geyser.Label:new({
            name = "strength"
        }, strengthHBox)
        strength:setColor(0, 0, 0, 0)
        strength:setFontSize(9)
        strength:echo(gmcp.Char.player.strength, "#e74856", "c")
        if PRSstats.events.strengthChange_id then
            killAnonymousEventHandler(PRSstats.events.strengthChange_id)
        end
        PRSstats.events.strengthChange_id = registerAnonymousEventHandler("gmcp.Char.player.strength", function()
            if gmcp.Char.player.strength then
                strength:echo(gmcp.Char.player.strength, "#e74856", "c")
            end
        end)
        local _strength = Geyser.Label:new({
            name = "_strength"
        }, strengthHBox)
        _strength:setColor(0, 0, 0, 0)
        _strength:setFontSize(9)
        _strength:echo("(" .. gmcp.Char.player._strength .. ")", "#c50f1f", "l")
        if PRSstats.events._strengthChange_id then
            killAnonymousEventHandler(PRSstats.events._strengthChange_id)
        end
        PRSstats.events._strengthChange_id = registerAnonymousEventHandler("gmcp.Char.player._strength", function()
            if gmcp.Char.player._strength then
                _strength:echo("(" .. gmcp.Char.player._strength .. ")", "#c50f1f", "l")
            end
        end)
        -- Agility
        local agilityHBox = Geyser.HBox:new({
            name = "agilityHBox",
            width = "93%"
        }, statsVBox)
        local agilityTitle = Geyser.Label:new({
            name = "agilityTitle"
        }, agilityHBox)
        agilityTitle:setColor(0, 0, 0, 0)
        agilityTitle:setFontSize(9)
        agilityTitle:echo("Agility:", "#aaaaaa", "r")
        local agility = Geyser.Label:new({
            name = "agility"
        }, agilityHBox)
        agility:setColor(0, 0, 0, 0)
        agility:setFontSize(9)
        agility:echo(gmcp.Char.player.agility, "#f9f1a5", "c")
        if PRSstats.events.agilityChange_id then
            killAnonymousEventHandler(PRSstats.events.agilityChange_id)
        end
        PRSstats.events.agilityChange_id = registerAnonymousEventHandler("gmcp.Char.player.agility", function()
            if gmcp.Char.player.agility then
                agility:echo(gmcp.Char.player.agility, "#f9f1a5", "c")
            end
        end)
        local _agility = Geyser.Label:new({
            name = "_agility"
        }, agilityHBox)
        _agility:setColor(0, 0, 0, 0)
        _agility:setFontSize(9)
        _agility:echo("(" .. gmcp.Char.player._agility .. ")", "#c19c00", "l")
        if PRSstats.events._agilityChange_id then
            killAnonymousEventHandler(PRSstats.events._agilityChange_id)
        end
        PRSstats.events._agilityChange_id = registerAnonymousEventHandler("gmcp.Char.player._agility", function()
            if gmcp.Char.player._agility then
                _agility:echo("(" .. gmcp.Char.player._agility .. ")", "#c19c00", "l")
            end
        end)
        -- Magic
        local magicHBox = Geyser.HBox:new({
            name = "magicHBox",
            width = "93%"
        }, statsVBox)
        local magicTitle = Geyser.Label:new({
            name = "magicTitle"
        }, magicHBox)
        magicTitle:setColor(0, 0, 0, 0)
        magicTitle:setFontSize(9)
        magicTitle:echo("Magic:", "#aaaaaa", "r")
        local magic = Geyser.Label:new({
            name = "magic"
        }, magicHBox)
        magic:setColor(0, 0, 0, 0)
        magic:setFontSize(9)
        magic:echo(gmcp.Char.player.magic, "#61d6d6", "c")
        if PRSstats.events.magicChange_id then
            killAnonymousEventHandler(PRSstats.events.magicChange_id)
        end
        PRSstats.events.magicChange_id = registerAnonymousEventHandler("gmcp.Char.player.magic", function()
            if gmcp.Char.player.magic then
                magic:echo(gmcp.Char.player.magic, "#61d6d6", "c")
            end
        end)
        local _magic = Geyser.Label:new({
            name = "_magic"
        }, magicHBox)
        _magic:setColor(0, 0, 0, 0)
        _magic:setFontSize(9)
        _magic:echo("(" .. gmcp.Char.player._magic .. ")", "#3a96dd", "l")
        if PRSstats.events._magicChange_id then
            killAnonymousEventHandler(PRSstats.events._magicChange_id)
        end
        PRSstats.events._magicChange_id = registerAnonymousEventHandler("gmcp.Char.player._magic", function()
            if gmcp.Char.player._magic then
                _magic:echo("(" .. gmcp.Char.player._magic .. ")", "#3a96dd", "l")
            end
        end)
        -- Spirit
        local spiritHBox = Geyser.HBox:new({
            name = "spiritHBox",
            width = "93%"
        }, statsVBox)
        local spiritTitle = Geyser.Label:new({
            name = "spiritTitle"
        }, spiritHBox)
        spiritTitle:setColor(0, 0, 0, 0)
        spiritTitle:setFontSize(9)
        spiritTitle:echo("Spirit:", "#aaaaaa", "r")
        local spirit = Geyser.Label:new({
            name = "spirit"
        }, spiritHBox)
        spirit:setColor(0, 0, 0, 0)
        spirit:setFontSize(9)
        spirit:echo(gmcp.Char.player.spirit, "#16c60c", "c")
        if PRSstats.events.spiritChange_id then
            killAnonymousEventHandler(PRSstats.events.spiritChange_id)
        end
        PRSstats.events.spiritChange_id = registerAnonymousEventHandler("gmcp.Char.player.spirit", function()
            if gmcp.Char.player.spirit then
                spirit:echo(gmcp.Char.player.spirit, "#16c60c", "c")
            end
        end)
        local _spirit = Geyser.Label:new({
            name = "_spirit"
        }, spiritHBox)
        _spirit:setColor(0, 0, 0, 0)
        _spirit:setFontSize(9)
        _spirit:echo("(" .. gmcp.Char.player._spirit .. ")", "#13a10e", "l")
        if PRSstats.events._spiritChange_id then
            killAnonymousEventHandler(PRSstats.events._spiritChange_id)
        end
        PRSstats.events._spiritChange_id = registerAnonymousEventHandler("gmcp.Char.player._spirit", function()
            if gmcp.Char.player._spirit then
                _spirit:echo("(" .. gmcp.Char.player._spirit .. ")", "#13a10e", "l")
            end
        end)
    
    local combatTitle = Geyser.Label:new({
        name = "combatTitle",
        height = 30
    }, statsVBox)
    combatTitle:setColor(0, 0, 0, 0)
    combatTitle:setFontSize(12)
    combatTitle:echo("Combat", "#f2f2f2", "c")
        -- Damage
        local damageHBox = Geyser.HBox:new({
            name = "damageHBox",
            width = "93%"
        }, statsVBox)
        local damageTitle = Geyser.Label:new({
            name = "damageTitle"
        }, damageHBox)
        damageTitle:setColor(0, 0, 0, 0)
        damageTitle:setFontSize(9)
        damageTitle:echo("Damage:", "#aaaaaa", "r")
        local damage = Geyser.Label:new({
            name = "damage"
        }, damageHBox)
        damage:setColor(0, 0, 0, 0)
        damage:setFontSize(9)
        damage:echo(string.format("%0.0f", gmcp.Char.player.damLow) .. "-" .. string.format("%0.0f", gmcp.Char.player.damHigh), "#e74856", "c")
        if PRSstats.events.damLowChange_id then
            killAnonymousEventHandler(PRSstats.events.damLowChange_id)
        end
        PRSstats.events.damLowChange_id = registerAnonymousEventHandler("gmcp.Char.player.damLow", function()
            if gmcp.Char.player.damLow then
                damage:echo(string.format("%0.0f", gmcp.Char.player.damLow) .. "-" .. string.format("%0.0f", gmcp.Char.player.damHigh), "#e74856", "c")
            end
        end)
        if PRSstats.events.damHighChange_id then
            killAnonymousEventHandler(PRSstats.events.damHighChange_id)
        end
        PRSstats.events.damHighChange_id = registerAnonymousEventHandler("gmcp.Char.player.damHigh", function()
            if gmcp.Char.player.damHigh then
                damage:echo(string.format("%0.0f", gmcp.Char.player.damLow) .. "-" .. string.format("%0.0f", gmcp.Char.player.damHigh), "#e74856", "c")
            end
        end)
        local dpr = Geyser.Label:new({
            name = "dpr"
        }, damageHBox)
        dpr:setColor(0, 0, 0, 0)
        dpr:setFontSize(9)
        dpr:echo(string.format("%0.1f", gmcp.Char.player.dpr) .. " dpr", "#c50f1f", "l")
        if PRSstats.events.dprChange_id then
            killAnonymousEventHandler(PRSstats.events.dprChange_id)
        end
        PRSstats.events.dprChange_id = registerAnonymousEventHandler("gmcp.Char.player.dpr", function()
            if gmcp.Char.player.dpr then
                dpr:echo(string.format("%0.1f", gmcp.Char.player.dpr) .. " dpr", "#c50f1f", "l")
            end
        end)
        -- Armor
        local armorHBox = Geyser.HBox:new({
            name = "armorHBox",
            width = "93%"
        }, statsVBox)
        local armorTitle = Geyser.Label:new({
            name = "armorTitle"
        }, armorHBox)
        armorTitle:setColor(0, 0, 0, 0)
        armorTitle:setFontSize(9)
        armorTitle:echo("Armor:", "#aaaaaa", "r")
        local armor = Geyser.Label:new({
            name = "armor"
        }, armorHBox)
        armor:setColor(0, 0, 0, 0)
        armor:setFontSize(9)
        armor:echo(gmcp.Char.player.armor, "#f2f2f2", "c")
        if PRSstats.events.armorChange_id then
            killAnonymousEventHandler(PRSstats.events.armorChange_id)
        end
        PRSstats.events.armorChange_id = registerAnonymousEventHandler("gmcp.Char.player.armor", function()
            if gmcp.Char.player.armor then
                armor:echo(gmcp.Char.player.armor, "#f2f2f2", "c")
            end
        end)
        local armorAbsorbtion = Geyser.Label:new({
            name = "armorAbsorbtion"
        }, armorHBox)
        armorAbsorbtion:setColor(0, 0, 0, 0)
        armorAbsorbtion:setFontSize(9)
        armorAbsorbtion:echo(gmcp.Char.player.armorAbsorbtion .. " absorb", "#f2f2f2", "l")
        if PRSstats.events.armorAbsorbtionChange_id then
            killAnonymousEventHandler(PRSstats.events.armorAbsorbtionChange_id)
        end
        PRSstats.events.armorAbsorbtionChange_id = registerAnonymousEventHandler("gmcp.Char.player.armorAbsorbtion", function()
            if gmcp.Char.player.armorAbsorbtion then
                armorAbsorbtion:echo(gmcp.Char.player.armorAbsorbtion .. " absorb", "#f2f2f2", "l")
            end
        end)
        -- Speed
        local speedHBox = Geyser.HBox:new({
            name = "speedHBox",
            width = "93%"
        }, statsVBox)
        local speedTitle = Geyser.Label:new({
            name = "speedTitle"
        }, speedHBox)
        speedTitle:setColor(0, 0, 0, 0)
        speedTitle:setFontSize(9)
        speedTitle:echo("Speed:", "#aaaaaa", "r")
        local speed = Geyser.Label:new({
            name = "speed"
        }, speedHBox)
        speed:setColor(0, 0, 0, 0)
        speed:setFontSize(9)
        speed:echo(gmcp.Char.player.speed, "#f9f1a5", "c")
        if PRSstats.events.speedChange_id then
            killAnonymousEventHandler(PRSstats.events.speedChange_id)
        end
        PRSstats.events.speedChange_id = registerAnonymousEventHandler("gmcp.Char.player.speed", function()
            if gmcp.Char.player.speed then
                speed:echo(gmcp.Char.player.speed, "#f9f1a5", "c")
            end
        end)
        local recoveryTime = Geyser.Label:new({
            name = "recoveryTime"
        }, speedHBox)
        recoveryTime:setColor(0, 0, 0, 0)
        recoveryTime:setFontSize(9)
        recoveryTime:echo("-" .. gmcp.Char.player.recoveryTime .. "s", "#16c60c", "l")
        if PRSstats.events.recoveryTimeChange_id then
            killAnonymousEventHandler(PRSstats.events.recoveryTimeChange_id)
        end
        PRSstats.events.recoveryTimeChange_id = registerAnonymousEventHandler("gmcp.Char.player.recoveryTime", function()
            if gmcp.Char.player.recoveryTime then
                recoveryTime:echo(gmcp.Char.player.recoveryTime, "#16c60c", "l")
            end
        end)
        -- Recovery
        local recoveryHBox = Geyser.HBox:new({
            name = "recoveryHBox",
            width = "93%"
        }, statsVBox)
        local recoveryTitle = Geyser.Label:new({
            name = "recoveryTitle"
        }, recoveryHBox)
        recoveryTitle:setColor(0, 0, 0, 0)
        recoveryTitle:setFontSize(9)
        recoveryTitle:echo("Recovery:", "#aaaaaa", "r")
        local XXX = Geyser.Label:new({
            name = "XXX"
        }, recoveryHBox)
        XXX:setColor(0, 0, 0, 0)
        XXX:setFontSize(9)
        -- XXX:echo(gmcp.Char.player.XXX, "#16c60c", "c")
        -- if PRSstats.events.XXXChange_id then
        --     killAnonymousEventHandler(PRSstats.events.XXXChange_id)
        -- end
        -- PRSstats.events.XXXChange_id = registerAnonymousEventHandler("gmcp.Char.player.XXX", function()
        --     if gmcp.Char.player.XXX then
        --         recovery:echo(gmcp.Char.player.XXX, "#16c60c", "c")
        --     end
        -- end)
        local apr = Geyser.Label:new({
            name = "apr"
        }, recoveryHBox)
        apr:setColor(0, 0, 0, 0)
        apr:setFontSize(9)
        apr:echo(string.format("%0.2f", gmcp.Char.player.apr) .. " apr", "#f9f1a5", "l")
        if PRSstats.events.aprChange_id then
            killAnonymousEventHandler(PRSstats.events.aprChange_id)
        end
        PRSstats.events.aprChange_id = registerAnonymousEventHandler("gmcp.Char.player.apr", function()
            if gmcp.Char.player.spr then
                apr:echo(string.format("%0.2f", gmcp.Char.player.apr) .. " apr", "#f9f1a5", "l")
            end
        end)
        -- Critical
        local criticalHBox = Geyser.HBox:new({
            name = "criticalHBox",
            width = "93%"
        }, statsVBox)
        local criticalTitle = Geyser.Label:new({
            name = "criticalTitle"
        }, criticalHBox)
        criticalTitle:setColor(0, 0, 0, 0)
        criticalTitle:setFontSize(9)
        criticalTitle:echo("Critical:", "#aaaaaa", "r")
        local criticalChance = Geyser.Label:new({
            name = "criticalChance"
        }, criticalHBox)
        criticalChance:setColor(0, 0, 0, 0)
        criticalChance:setFontSize(9)
        criticalChance:echo(string.format("%0.2f", gmcp.Char.player.criticalChance) .. "%", "#f9f1a5", "c")
        if PRSstats.events.criticalChanceChange_id then
            killAnonymousEventHandler(PRSstats.events.criticalChanceChange_id)
        end
        PRSstats.events.criticalChanceChange_id = registerAnonymousEventHandler("gmcp.Char.player.criticalChance", function()
            if gmcp.Char.player.criticalChance then
                criticalChance:echo(string.format("%0.2f", gmcp.Char.player.criticalChance) .. "%", "#f9f1a5", "c")
            end
        end)
        local criticalMultiplier = Geyser.Label:new({
            name = "criticalMultiplier"
        }, criticalHBox)
        criticalMultiplier:setColor(0, 0, 0, 0)
        criticalMultiplier:setFontSize(9)
        criticalMultiplier:echo(string.format("%0.2f", gmcp.Char.player.criticalMultiplier) .. "x", "#e74856", "l")
        if PRSstats.events.criticalMultiplierChange_id then
            killAnonymousEventHandler(PRSstats.events.criticalMultiplierChange_id)
        end
        PRSstats.events.criticalMultiplierChange_id = registerAnonymousEventHandler("gmcp.Char.player.criticalMultiplier", function()
            if gmcp.Char.player.criticalMultiplier then
                criticalMultiplier:echo(string.format("%0.2f", gmcp.Char.player.criticalMultiplier) .. "x", "#e74856", "l")
            end
        end)
        -- Magic Damage &amp; Casting
        local magicDamageHBox = Geyser.HBox:new({
            name = "magicDamageHBox",
            width = "93%"
        }, statsVBox)
        local magicDamageBonusTitle = Geyser.Label:new({
            name = "magicDamageBonusTitle"
        }, magicDamageHBox)
        magicDamageBonusTitle:setColor(0, 0, 0, 0)
        magicDamageBonusTitle:setFontSize(9)
        magicDamageBonusTitle:echo("Magic:", "#aaaaaa", "r")
        local magicDamageBonus = Geyser.Label:new({
            name = "magicDamageBonus"
        }, magicDamageHBox)
        magicDamageBonus:setColor(0, 0, 0, 0)
        magicDamageBonus:setFontSize(9)
        magicDamageBonus:echo("+" .. gmcp.Char.player.magicDamageBonus, "#b4009e", "c")
        if PRSstats.events.magicDamageBonusChange_id then
            killAnonymousEventHandler(PRSstats.events.magicDamageBonusChange_id)
        end
        PRSstats.events.magicDamageBonusChange_id = registerAnonymousEventHandler("gmcp.Char.player.magicDamageBonus", function()
            if gmcp.Char.player.magicDamageBonus then
                magicDamageBonus:echo("+" .. gmcp.Char.player.magicDamageBonus, "#b4009e", "c")
            end
        end)
        local magicCasting = Geyser.Label:new({
            name = "magicCasting"
        }, magicDamageHBox)
        magicCasting:setColor(0, 0, 0, 0)
        magicCasting:setFontSize(9)
        magicCasting:echo("cast " .. string.format("%0.2f", gmcp.Char.player.magicCastingTimeBonus) .. "s", "#61d6d6", "l")
        if PRSstats.events.magicCastingChange_id then
            killAnonymousEventHandler(PRSstats.events.magicCastingChange_id)
        end
        PRSstats.events.magicCastingChange_id = registerAnonymousEventHandler("gmcp.Char.player.magicCastingTimeBonus", function()
            if gmcp.Char.player.magicCasting then
                magicCasting:echo("cast " .. string.format("%0.2f", gmcp.Char.player.magicCastingTimeBonus) .. "s", "#61d6d6", "l")
            end
        end)
        -- Focus
        local focusHBox = Geyser.HBox:new({
            name = "focusHBox",
            width = "93%"
        }, statsVBox)
        local focusTitle = Geyser.Label:new({
            name = "focusTitle"
        }, focusHBox)
        focusTitle:setColor(0, 0, 0, 0)
        focusTitle:setFontSize(9)
        focusTitle:echo("Focus:", "#aaaaaa", "r")
        local focus = Geyser.Label:new({
            name = "focus"
        }, focusHBox)
        focus:setColor(0, 0, 0, 0)
        focus:setFontSize(9)
        focus:echo(gmcp.Char.player.focus, "#3b78ff", "c")
        if PRSstats.events.focusChange_id then
            killAnonymousEventHandler(PRSstats.events.focusChange_id)
        end
        PRSstats.events.focusChange_id = registerAnonymousEventHandler("gmcp.Char.player.focus", function()
            if gmcp.Char.player.focus then
                focus:echo(gmcp.Char.player.focus, "#3b78ff", "c")
            end
        end)
        local focusChance = Geyser.Label:new({
            name = "focusChance"
        }, focusHBox)
        focusChance:setColor(0, 0, 0, 0)
        focusChance:setFontSize(9)
        focusChance:echo(string.format("%0.2f", gmcp.Char.player.focusChance) .. "%", "#3b78ff", "l")
        if PRSstats.events.focusChanceChange_id then
            killAnonymousEventHandler(PRSstats.events.focusChanceChange_id)
        end
        PRSstats.events.focusChanceChange_id = registerAnonymousEventHandler("gmcp.Char.player.focusChance", function()
            if gmcp.Char.player.focusChance then
                focusChance:echo(string.format("%0.2f", gmcp.Char.player.focusChance) .. "%", "#3b78ff", "l")
            end
        end)
    local resistancesTitle = Geyser.Label:new({
        name = "resistancesTitle",
        height = 30
    }, statsVBox)
    resistancesTitle:setColor(0, 0, 0, 0)
    resistancesTitle:setFontSize(12)
    resistancesTitle:echo("Resistances", "#f2f2f2", "c")
        -- Bludgeon &amp; Arcane
        local resist1HBox = Geyser.HBox:new({
            name = "resist1HBox",
            width = "93%"
        }, statsVBox)
        local resistBludgeoningTitle = Geyser.Label:new({
            name = "resistBludgeoningTitle"
        }, resist1HBox)
        resistBludgeoningTitle:setColor(0, 0, 0, 0)
        resistBludgeoningTitle:setFontSize(9)
        resistBludgeoningTitle:echo("Bludgeon: ", "#aaaaaa", "r")
        local resistBludgeoning = Geyser.Label:new({
            name = "resistBludgeoning"
        }, resist1HBox)
        resistBludgeoning:setColor(0, 0, 0, 0)
        resistBludgeoning:setFontSize(9)
        resistBludgeoning:echo(gmcp.Char.player.resistBludgeoning, "#c19c00", "l")
        if PRSstats.events.resistBludgeoningChange_id then
            killAnonymousEventHandler(PRSstats.events.resistBludgeoningChange_id)
        end
        PRSstats.events.resistBludgeoningChange_id = registerAnonymousEventHandler("gmcp.Char.player.resistBludgeoning", function()
            if gmcp.Char.player.resistBludgeoning then
                resistBludgeoning:echo(gmcp.Char.player.resistBludgeoning, "#c19c00", "l")
            end
        end)
        local arcaneTitle = Geyser.Label:new({
            name = "arcaneTitle"
        }, resist1HBox)
        arcaneTitle:setColor(0, 0, 0, 0)
        arcaneTitle:setFontSize(9)
        arcaneTitle:echo("Arcane: ", "#aaaaaa", "r")
        local resistArcane = Geyser.Label:new({
            name = "arcane"
        }, resist1HBox)
        resistArcane:setColor(0, 0, 0, 0)
        resistArcane:setFontSize(9)
        resistArcane:echo(gmcp.Char.player.resistArcane, "#61d6d6", "l")
        if PRSstats.events.resistArcaneChange_id then
            killAnonymousEventHandler(PRSstats.events.resistArcaneChange_id)
        end
        PRSstats.events.resistArcaneChange_id = registerAnonymousEventHandler("gmcp.Char.player.resistArcane", function()
            if gmcp.Char.player.resistArcane then
                resistArcane:echo(gmcp.Char.player.resistArcane, "#61d6d6", "l")
            end
        end)
        -- Slash &amp; Electric
        local resist2HBox = Geyser.HBox:new({
            name = "resist2HBox",
            width = "93%"
        }, statsVBox)
        local resistSlashingTitle = Geyser.Label:new({
            name = "resistSlashingTitle"
        }, resist2HBox)
        resistSlashingTitle:setColor(0, 0, 0, 0)
        resistSlashingTitle:setFontSize(9)
        resistSlashingTitle:echo("Slash: ", "#aaaaaa", "r")
        local resistSlashing = Geyser.Label:new({
            name = "resistSlashing"
        }, resist2HBox)
        resistSlashing:setColor(0, 0, 0, 0)
        resistSlashing:setFontSize(9)
        resistSlashing:echo(gmcp.Char.player.resistSlashing, "#e74856", "l")
        if PRSstats.events.resistSlashingChange_id then
            killAnonymousEventHandler(PRSstats.events.resistSlashingChange_id)
        end
        PRSstats.events.resistSlashingChange_id = registerAnonymousEventHandler("gmcp.Char.player.resistSlashing", function()
            if gmcp.Char.player.resistSlashing then
                resistSlashing:echo(gmcp.Char.player.resistSlashing, "#e74856", "l")
            end
        end)
        local resistElectricTitle = Geyser.Label:new({
            name = "resistElectricTitle"
        }, resist2HBox)
        resistElectricTitle:setColor(0, 0, 0, 0)
        resistElectricTitle:setFontSize(9)
        resistElectricTitle:echo("Electric: ", "#aaaaaa", "r")
        local resistElectric = Geyser.Label:new({
            name = "Electric"
        }, resist2HBox)
        resistElectric:setColor(0, 0, 0, 0)
        resistElectric:setFontSize(9)
        resistElectric:echo(gmcp.Char.player.resistElectric, "#f9f1a5", "l")
        if PRSstats.events.resistElectricChange_id then
            killAnonymousEventHandler(PRSstats.events.resistElectricChange_id)
        end
        PRSstats.events.resistElectricChange_id = registerAnonymousEventHandler("gmcp.Char.player.resistElectric", function()
            if gmcp.Char.player.resistElectric then
                resistElectric:echo(gmcp.Char.player.resistElectric, "#f9f1a5", "l")
            end
        end)
        -- Pierce &amp; Fire
        local resist3HBox = Geyser.HBox:new({
            name = "resist3HBox",
            width = "93%"
        }, statsVBox)
        local resistPiercingTitle = Geyser.Label:new({
            name = "resistPiercingTitle"
        }, resist3HBox)
        resistPiercingTitle:setColor(0, 0, 0, 0)
        resistPiercingTitle:setFontSize(9)
        resistPiercingTitle:echo("Pierce: ", "#aaaaaa", "r")
        local resistPiercing = Geyser.Label:new({
            name = "resistPiercing"
        }, resist3HBox)
        resistPiercing:setColor(0, 0, 0, 0)
        resistPiercing:setFontSize(9)
        resistPiercing:echo(gmcp.Char.player.resistPiercing, "#c50f1f", "l")
        if PRSstats.events.resistPiercingChange_id then
            killAnonymousEventHandler(PRSstats.events.resistPiercingChange_id)
        end
        PRSstats.events.resistPiercingChange_id = registerAnonymousEventHandler("gmcp.Char.player.resistPiercing", function()
            if gmcp.Char.player.resistPiercing then
                resistPiercing:echo(gmcp.Char.player.resistPiercing, "#c50f1f", "l")
            end
        end)
        local resistFireTitle = Geyser.Label:new({
            name = "resistFireTitle"
        }, resist3HBox)
        resistFireTitle:setColor(0, 0, 0, 0)
        resistFireTitle:setFontSize(9)
        resistFireTitle:echo("Fire: ", "#aaaaaa", "r")
        local resistFire = Geyser.Label:new({
            name = "Fire"
        }, resist3HBox)
        resistFire:setColor(0, 0, 0, 0)
        resistFire:setFontSize(9)
        resistFire:echo(gmcp.Char.player.resistFire, "#e74856", "l")
        if PRSstats.events.resistFireChange_id then
            killAnonymousEventHandler(PRSstats.events.resistFireChange_id)
        end
        PRSstats.events.resistFireChange_id = registerAnonymousEventHandler("gmcp.Char.player.resistFire", function()
            if gmcp.Char.player.resistFire then
                resistFire:echo(gmcp.Char.player.resistFire, "#e74856", "l")
            end
        end)
        -- Poison &amp; Ice
        local resist4HBox = Geyser.HBox:new({
            name = "resist4HBox",
            width = "93%"
        }, statsVBox)
        local resistPoisonTitle = Geyser.Label:new({
            name = "resistPoisonTitle"
        }, resist4HBox)
        resistPoisonTitle:setColor(0, 0, 0, 0)
        resistPoisonTitle:setFontSize(9)
        resistPoisonTitle:echo("Poison: ", "#aaaaaa", "r")
        local resistPoison = Geyser.Label:new({
            name = "resistPoison"
        }, resist4HBox)
        resistPoison:setColor(0, 0, 0, 0)
        resistPoison:setFontSize(9)
        resistPoison:echo(gmcp.Char.player.resistPoison, "#13a10e", "l")
        if PRSstats.events.resistPoisonChange_id then
            killAnonymousEventHandler(PRSstats.events.resistPoisonChange_id)
        end
        PRSstats.events.resistPoisonChange_id = registerAnonymousEventHandler("gmcp.Char.player.resistPoison", function()
            if gmcp.Char.player.resistPoison then
                resistPoison:echo(gmcp.Char.player.resistPoison, "#13a10e", "l")
            end
        end)
        local resistIceTitle = Geyser.Label:new({
            name = "resistIceTitle"
        }, resist4HBox)
        resistIceTitle:setColor(0, 0, 0, 0)
        resistIceTitle:setFontSize(9)
        resistIceTitle:echo("Ice: ", "#aaaaaa", "r")
        local resistIce = Geyser.Label:new({
            name = "Ice"
        }, resist4HBox)
        resistIce:setColor(0, 0, 0, 0)
        resistIce:setFontSize(9)
        resistIce:echo(gmcp.Char.player.resistIce, "#3b78ff", "l")
        if PRSstats.events.resistIceChange_id then
            killAnonymousEventHandler(PRSstats.events.resistIceChange_id)
        end
        PRSstats.events.resistIceChange_id = registerAnonymousEventHandler("gmcp.Char.player.resistIce", function()
            if gmcp.Char.player.resistIce then
                resistIce:echo(gmcp.Char.player.resistIce, "#3b78ff", "l")
            end
        end)
        -- Acid &amp; Holy
        local resist5HBox = Geyser.HBox:new({
            name = "resist5HBox",
            width = "93%"
        }, statsVBox)
        local resistAcidTitle = Geyser.Label:new({
            name = "resistAcidTitle"
        }, resist5HBox)
        resistAcidTitle:setColor(0, 0, 0, 0)
        resistAcidTitle:setFontSize(9)
        resistAcidTitle:echo("Acid: ", "#aaaaaa", "r")
        local resistAcid = Geyser.Label:new({
            name = "resistAcid"
        }, resist5HBox)
        resistAcid:setColor(0, 0, 0, 0)
        resistAcid:setFontSize(9)
        resistAcid:echo(gmcp.Char.player.resistAcid, "#16c60c", "l")
        if PRSstats.events.resistAcidChange_id then
            killAnonymousEventHandler(PRSstats.events.resistAcidChange_id)
        end
        PRSstats.events.resistAcidChange_id = registerAnonymousEventHandler("gmcp.Char.player.resistAcid", function()
            if gmcp.Char.player.resistAcid then
                resistAcid:echo(gmcp.Char.player.resistAcid, "#16c60c", "l")
            end
        end)
        local resistHolyTitle = Geyser.Label:new({
            name = "resistHolyTitle"
        }, resist5HBox)
        resistHolyTitle:setColor(0, 0, 0, 0)
        resistHolyTitle:setFontSize(9)
        resistHolyTitle:echo("Holy: ", "#aaaaaa", "r")
        local resistHoly = Geyser.Label:new({
            name = "Holy"
        }, resist5HBox)
        resistHoly:setColor(0, 0, 0, 0)
        resistHoly:setFontSize(9)
        resistHoly:echo(gmcp.Char.player.resistHoly, "#f2f2f2", "l")
        if PRSstats.events.resistHolyChange_id then
            killAnonymousEventHandler(PRSstats.events.resistHolyChange_id)
        end
        PRSstats.events.resistHolyChange_id = registerAnonymousEventHandler("gmcp.Char.player.resistHoly", function()
            if gmcp.Char.player.resistHoly then
                resistHoly:echo(gmcp.Char.player.resistHoly, "#f2f2f2", "l")
            end
        end)
end

local function add_gauges()
    -- Hit Points Gauge
    HPbar = SUG:new({
        name = "HP",
        y = 80,
        height = 25,
        width = "95%", -- everything up to here is standard Geyser.Gauge
        updateTime = 0,
        updateEvent = "gmcp.Char.player",
        textTemplate = "HP: |c / |m  (|p%)", -- gauge will show "HP: 500/1000 (50%)" as the text if you had 500 current and 1000 max hp
        currentVariable = "gmcp.Char.player.hp", -- if gmcp.Char.Vitals.hp is nil or unreachable, it will use the defaultCurrent of 50
        maxVariable = "gmcp.Char.player.maxHp" -- if gmcp.Char.Vitals.maxhp is nil or unreachable, it will use the defaultMax of 100
    }, GUI.tabwindow1.Vitalscenter)
    HPbar.front:setStyleSheet([[background-color: #63e2b7;
      border-top: 1px black solid;
      border-left: 1px black solid;
      border-bottom: 1px black solid;
      border-radius: 10;
      margin-right: 5px;
      padding: 3px;
    ]])
    HPbar.back:setStyleSheet([[background-color: #303030;
      border-width: 0px;
      border-color: black;
      border-style: solid;
      border-radius: 10;
      margin-right: 5px;
      padding: 3px;
    ]])
    HPbar.text:setStyleSheet([[
      padding-left: 5px;
    ]])

    -- Energy Points Gauge
    ENbar = SUG:new({
        name = "EN",
        y = 115,
        height = 25,
        width = "95%",
        updateTime = 0,
        updateEvent = "gmcp.Char.player",
        textTemplate = "EN: |c / |m  (|p%)",
        currentVariable = "gmcp.Char.player.energy",
        maxVariable = "gmcp.Char.player.maxEnergy"
    }, GUI.tabwindow1.Vitalscenter)
    ENbar.front:setStyleSheet([[background-color: #cccccc;
      border-top: 1px black solid;
      border-left: 1px black solid;
      border-bottom: 1px black solid;
      border-radius: 10;
      margin-right: 5px;
      padding: 3px;
    ]])
    ENbar.back:setStyleSheet([[background-color: #303030;
      border-width: 0px;
      border-color: black;
      border-style: solid;
      border-radius: 10;
      margin-right: 5px;
      padding: 3px;
    ]])
    ENbar.text:setStyleSheet([[
      padding-left: 5px;
    ]])

    -- Stamina Points Gauge
    STbar = SUG:new({
        name = "ST",
        y = 150,
        height = 25,
        width = "95%",
        updateTime = 0,
        updateEvent = "gmcp.Char.player",
        textTemplate = "ST: |c / |m  (|p%)",
        currentVariable = "gmcp.Char.player.stamina",
        maxVariable = "gmcp.Char.player.maxStamina"
    }, GUI.tabwindow1.Vitalscenter)
    STbar.front:setStyleSheet([[background-color: #f2c97d;
      border-top: 1px black solid;
      border-left: 1px black solid;
      border-bottom: 1px black solid;
      border-radius: 10;
      margin-right: 5px;
      padding: 3px;]])
    STbar.back:setStyleSheet([[background-color: #303030;
      border-width: 0px;
      border-color: black;
      border-style: solid;
      border-radius: 10;
      margin-right: 5px;
      padding: 3px;]])
    STbar.text:setStyleSheet([[
      padding-left: 5px;
    ]])

    -- Food Points Gauge
    FPbar = SUG:new({
        name = "FP",
        y = 185,
        height = 25,
        width = "95%",
        updateTime = 0,
        updateEvent = "gmcp.Char.player",
        textTemplate = "Food: |c / |m  (|p%)",
        currentVariable = "gmcp.Char.player.food",
        maxVariable = "gmcp.Char.player.maxFood"
    }, GUI.tabwindow1.Vitalscenter)
    FPbar.front:setStyleSheet([[background-color: #63e2b7;
      border-top: 1px black solid;
      border-left: 1px black solid;
      border-bottom: 1px black solid;
      border-radius: 10;
      margin-right: 5px;
      padding: 3px;
    ]])
    FPbar.back:setStyleSheet([[background-color: #303030;
      border-width: 0px;
      border-color: black;
      border-style: solid;
      border-radius: 10;
      margin-right: 5px;
      padding: 3px;
    ]])
    FPbar.text:setStyleSheet([[
      padding-left: 5px;
    ]])

    -- Rage Points Gauge
    RPbar = SUG:new({
        name = "RP",
        height = 25,
        width = "95%",
        updateTime = 0,
        updateEvent = "gmcp.Char.player",
        textTemplate = "Rage: |c",
        currentVariable = "gmcp.Char.player.rage",
        maxVariable = "gmcp.Char.player.maxRage"
    }, GUI.tabwindow2.Combatcenter)
    RPbar.front:setStyleSheet([[background-color: #e74856;
        border-top: 1px black solid;
        border-left: 1px black solid;
        border-bottom: 1px black solid;
        border-radius: 10;
        margin-right: 5px;
        padding: 3px;]])
    RPbar.back:setStyleSheet([[background-color: #303030;
        border-width: 0px;
        border-color: black;
        border-style: solid;
        border-radius: 10;
        margin-right: 5px;
        padding: 3px;]])
    RPbar.text:setStyleSheet([[
      padding-left: 5px;
    ]])

    -- Combo Points Gauge
    CPbar = SUG:new({
        name = "CP",
        y = 45,
        height = 25,
        width = "95%",
        updateTime = 0,
        updateEvent = "gmcp.Char.player",
        textTemplate = "Combo: |c",
        currentVariable = "gmcp.Char.player.combo",
        maxVariable = "gmcp.Char.player.maxCombo"
    }, GUI.tabwindow2.Combatcenter)
    CPbar.front:setStyleSheet([[background-color: #e74856;
        border-top: 1px black solid;
        border-left: 1px black solid;
        border-bottom: 1px black solid;
        border-radius: 10;
        margin-right: 5px;
        padding: 3px;]])
    CPbar.back:setStyleSheet([[background-color: #303030;
        border-width: 0px;
        border-color: black;
        border-style: solid;
        border-radius: 10;
        margin-right: 5px;
        padding: 3px;]])
    CPbar.text:setStyleSheet([[
      padding-left: 5px;
    ]])

    -- Experience Points Gauge
    XPbar = SUG:new({
        name = "XP",
        y = 45,
        height = 25,
        width = "95%",
        updateTime = 0,
        updateEvent = "gmcp.Char.player",
        textTemplate = "Hero"
    }, GUI.tabwindow1.Vitalscenter)
    XPbar.front:setStyleSheet([[background-color: #70c0e8;
        border-top: 1px black solid;
        border-left: 1px black solid;
        border-bottom: 1px black solid;
        border-radius: 10;
        margin-right: 5px;
        padding: 3px;
        textTemplate = "Hero",
        currentVariable = "PRSstats.xp.current",
        maxVariable = "PRSstats.xp.current"
      ]])
    XPbar.back:setStyleSheet([[background-color: #70c0e8;
        border-width: 0px;
        border-color: black;
        border-style: solid;
        border-radius: 10;
        margin-right: 5px;
        padding: 3px;
      ]])
    XPbar.text:setStyleSheet([[
        padding-left: 5px;
      ]])

    if gmcp.Char.player.xpForNextLevel then

        PRSstats.xp = PRSstats.xp or {}
        PRSstats.xp.current = gmcp.Char.player.xp - gmcp.Char.player.xpForCurrentLevel
        PRSstats.xp.tnl = gmcp.Char.player.xpForNextLevel - gmcp.Char.player.xpForCurrentLevel

        XPbar = SUG:new({
            name = "XP",
            y = 45,
            height = 25,
            width = "95%",
            updateTime = 0,
            updateEvent = "gmcp.Char.player",
            textTemplate = "XP: |c / |m   (|p%)",
            currentVariable = "PRSstats.xp.current",
            maxVariable = "PRSstats.xp.tnl"
        }, GUI.tabwindow1.Vitalscenter)
        XPbar.front:setStyleSheet([[background-color: #70c0e8;
        border-top: 1px black solid;
        border-left: 1px black solid;
        border-bottom: 1px black solid;
        border-radius: 10;
        margin-right: 5px;
        padding: 3px;
      ]])
        XPbar.back:setStyleSheet([[background-color: #303030;
        border-width: 0px;
        border-color: black;
        border-style: solid;
        border-radius: 10;
        margin-right: 5px;
        padding: 3px;
      ]])
        XPbar.text:setStyleSheet([[
        padding-left: 5px;
      ]])

        if PRSstats.events.xp_id then
            killAnonymousEventHandler(PRSstats.events.xp_id)
        end
        PRSstats.events.xp_id = registerAnonymousEventHandler("gmcp.Char.player.xp", function()
            PRSstats.xp.current = gmcp.Char.player.xp - gmcp.Char.player.xpForCurrentLevel
        end)

        if PRSstats.events.xpForCurrentLevel_id then
            killAnonymousEventHandler(PRSstats.events.xpForCurrentLevel_id)
        end
        PRSstats.events.xpForCurrentLevel_id = registerAnonymousEventHandler("gmcp.Char.player.xpForCurrentLevel",
            function()
                PRSstats.xp.current = gmcp.Char.player.xp - gmcp.Char.player.xpForCurrentLevel
                PRSstats.xp.tnl = gmcp.Char.player.xpForNextLevel - gmcp.Char.player.xpForCurrentLevel
            end)

        if PRSstats.events.xpForNextLevel_id then
            killAnonymousEventHandler(PRSstats.events.xpForNextLevel_id)
        end
        PRSstats.events.xpForNextLevel_id = registerAnonymousEventHandler("gmcp.Char.player.xpForNextLevel", function()
            if gmcp.Char.player.xpForNextLevel then
                PRSstats.xp.tnl = gmcp.Char.player.xpForNextLevel - gmcp.Char.player.xpForCurrentLevel
            end
        end)
    end
end

function PRSstats.stats()
    if gmcp and gmcp.Char and gmcp.Char.player then
        vitalsHeader()
        statsTab()
        add_gauges()
    else
        local initialize_ev_handler = registerAnonymousEventHandler("gmcp.Char.player", function()
            if gmcp and gmcp.Char and gmcp.Char.player and gmcp.Char.player.name then
                vitalsHeader()
                statsTab()
                add_gauges()
            end
        end, true)
    end
end
</script>
          
        <packageName/>
        
        <eventHandlerList>
</eventHandlerList>
        
      </Script>
      
    </ScriptGroup>
    
  </ScriptPackage>
  <AliasPackage>
</AliasPackage>
  <TimerPackage>
</TimerPackage>
  <TriggerPackage>
</TriggerPackage>
  <KeyPackage>
</KeyPackage>
</MudletPackage>
